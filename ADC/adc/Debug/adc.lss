
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000028c  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000954  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000014d  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000db8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ed  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c5  00000000  00000000  00001545  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000457  00000000  00000000  0000170a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00001b64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000016f  00000000  00000000  00001c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000194  00000000  00000000  00001dbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
  8a:	0c 94 44 01 	jmp	0x288	; 0x288 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <write_command>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles (200);
  92:	92 e4       	ldi	r25, 0x42	; 66
  94:	9a 95       	dec	r25
  96:	f1 f7       	brne	.-4      	; 0x94 <write_command+0x2>
  98:	00 c0       	rjmp	.+0      	; 0x9a <write_command+0x8>

void write_command(unsigned char comm)
{
	
	_delay_ms(2);
	LCD_PORT=((comm & 0xF0)|(1<<en)); 	//Sending 4 MSB bits of command, & Enable=1,RW=0,RS=0;
  9a:	98 2f       	mov	r25, r24
  9c:	90 7f       	andi	r25, 0xF0	; 240
  9e:	92 60       	ori	r25, 0x02	; 2
  a0:	9b bb       	out	0x1b, r25	; 27
	cbi(LCD_PORT,en);
  a2:	d9 98       	cbi	0x1b, 1	; 27
	
	LCD_PORT=((comm<<4)|(1<<en)); 		//Sending 4 LSB bits of command
  a4:	82 95       	swap	r24
  a6:	80 7f       	andi	r24, 0xF0	; 240
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	8b bb       	out	0x1b, r24	; 27
	cbi(LCD_PORT,en);
  ac:	d9 98       	cbi	0x1b, 1	; 27
}
  ae:	08 95       	ret

000000b0 <lcd_init>:
  b0:	82 e4       	ldi	r24, 0x42	; 66
  b2:	8a 95       	dec	r24
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lcd_init+0x2>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <lcd_init+0x8>
//LCD
void lcd_init(void)
{
	_delay_ms(300);
	
	LCD_DDR=0b11110011;					//Initialize the LCD port first
  b8:	83 ef       	ldi	r24, 0xF3	; 243
  ba:	8a bb       	out	0x1a, r24	; 26
	
	write_command(0x80);					//initial address of DDRAM for first line
  bc:	80 e8       	ldi	r24, 0x80	; 128
  be:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
	write_command(0x28);					//To select 4 bit data
  c2:	88 e2       	ldi	r24, 0x28	; 40
  c4:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
		
	write_command(0x0e);					//Command to on the display & cursor blink/blink off
  c8:	8e e0       	ldi	r24, 0x0E	; 14
  ca:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
	write_command(0x01);					//Command to clear LCD display
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
	
	write_command(0x06);					//Command for character entry mode
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
}
  da:	08 95       	ret

000000dc <write_data>:
  dc:	92 e4       	ldi	r25, 0x42	; 66
  de:	9a 95       	dec	r25
  e0:	f1 f7       	brne	.-4      	; 0xde <write_data+0x2>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <write_data+0x8>

 void write_data(unsigned char lcd_data)
{
	_delay_ms(2);
	
	LCD_PORT=((lcd_data & 0xF0)|(1<<en)|(1<<rs)); 	//Sending 4 MSB bits of command, & Enable=1,RW=0,RS=1;
  e4:	98 2f       	mov	r25, r24
  e6:	90 7f       	andi	r25, 0xF0	; 240
  e8:	93 60       	ori	r25, 0x03	; 3
  ea:	9b bb       	out	0x1b, r25	; 27
	cbi(LCD_PORT,en);
  ec:	d9 98       	cbi	0x1b, 1	; 27
	
	LCD_PORT=((lcd_data<<4)|(1<<en)|(1<<rs)); 		//Sending 4 LSB bits of command
  ee:	82 95       	swap	r24
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	83 60       	ori	r24, 0x03	; 3
  f4:	8b bb       	out	0x1b, r24	; 27
	cbi(LCD_PORT,en);
  f6:	d9 98       	cbi	0x1b, 1	; 27
}	
  f8:	08 95       	ret

000000fa <lcd_prints>:

void lcd_prints(char *print_str)
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ec 01       	movw	r28, r24
	while(*print_str)
 100:	88 81       	ld	r24, Y
 102:	88 23       	and	r24, r24
 104:	31 f0       	breq	.+12     	; 0x112 <lcd_prints+0x18>
	
	LCD_PORT=((lcd_data<<4)|(1<<en)|(1<<rs)); 		//Sending 4 LSB bits of command
	cbi(LCD_PORT,en);
}	

void lcd_prints(char *print_str)
 106:	21 96       	adiw	r28, 0x01	; 1
{
	while(*print_str)
	{
		if(*print_str=='\0')
		break;
		write_data(*print_str);
 108:	0e 94 6e 00 	call	0xdc	; 0xdc <write_data>
	cbi(LCD_PORT,en);
}	

void lcd_prints(char *print_str)
{
	while(*print_str)
 10c:	89 91       	ld	r24, Y+
 10e:	88 23       	and	r24, r24
 110:	d9 f7       	brne	.-10     	; 0x108 <lcd_prints+0xe>
		if(*print_str=='\0')
		break;
		write_data(*print_str);
		print_str++;
	}
}
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lcd_printi>:

void lcd_printi(int num)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	00 d0       	rcall	.+0      	; 0x11e <lcd_printi+0x6>
 11e:	00 d0       	rcall	.+0      	; 0x120 <lcd_printi+0x8>
 120:	0f 92       	push	r0
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
	char buff[]={'0','0','0','0','0'};
 126:	de 01       	movw	r26, r28
 128:	11 96       	adiw	r26, 0x01	; 1
 12a:	e0 e6       	ldi	r30, 0x60	; 96
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	25 e0       	ldi	r18, 0x05	; 5
 130:	01 90       	ld	r0, Z+
 132:	0d 92       	st	X+, r0
 134:	21 50       	subi	r18, 0x01	; 1
 136:	e1 f7       	brne	.-8      	; 0x130 <lcd_printi+0x18>
	itoa(num,buff,10);
 138:	be 01       	movw	r22, r28
 13a:	6f 5f       	subi	r22, 0xFF	; 255
 13c:	7f 4f       	sbci	r23, 0xFF	; 255
 13e:	4a e0       	ldi	r20, 0x0A	; 10
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	0e 94 ff 00 	call	0x1fe	; 0x1fe <itoa>
	lcd_prints(buff);
 146:	ce 01       	movw	r24, r28
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_prints>
}
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <lcd_goto>:
			lcd_goto(0,2);
		write_data(data);
}
void lcd_goto(uint8_t x,uint8_t y)
{
	if(y==1)
 15e:	61 30       	cpi	r22, 0x01	; 1
 160:	21 f4       	brne	.+8      	; 0x16a <lcd_goto+0xc>
		write_command(0x80|x);
 162:	80 68       	ori	r24, 0x80	; 128
 164:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
 168:	08 95       	ret
	else if(y==2)
 16a:	62 30       	cpi	r22, 0x02	; 2
 16c:	19 f4       	brne	.+6      	; 0x174 <lcd_goto+0x16>
		write_command(0xC0|x);
 16e:	80 6c       	ori	r24, 0xC0	; 192
 170:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
 174:	08 95       	ret

00000176 <lcd_printc>:
	itoa(num,buff,10);
	lcd_prints(buff);
}

void lcd_printc(char data)
{
 176:	cf 93       	push	r28
 178:	c8 2f       	mov	r28, r24
		if(data=='\n')
 17a:	8a 30       	cpi	r24, 0x0A	; 10
 17c:	21 f4       	brne	.+8      	; 0x186 <lcd_printc+0x10>
			lcd_goto(0,2);
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	62 e0       	ldi	r22, 0x02	; 2
 182:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_goto>
		write_data(data);
 186:	8c 2f       	mov	r24, r28
 188:	0e 94 6e 00 	call	0xdc	; 0xdc <write_data>
}
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <lcd_clrscr>:
		write_command(0xC0|x);
}

void lcd_clrscr(void)
{
	write_command(0x01);
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
 196:	82 e4       	ldi	r24, 0x42	; 66
 198:	8a 95       	dec	r24
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_clrscr+0x8>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_clrscr+0xe>
	_delay_ms(3);
	write_command(0x80);
 19e:	80 e8       	ldi	r24, 0x80	; 128
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
}
 1a4:	08 95       	ret

000001a6 <init_adc>:
void init_adc(void);
int read_adc(char adc);

void init_adc(void)
{
	ADMUX=(1<<REFS0);
 1a6:	80 e4       	ldi	r24, 0x40	; 64
 1a8:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(1<<ADEN);
 1aa:	87 e8       	ldi	r24, 0x87	; 135
 1ac:	86 b9       	out	0x06, r24	; 6
}
 1ae:	08 95       	ret

000001b0 <read_adc>:

int read_adc(char adc)
{
	ADMUX&=(0b11100000);
 1b0:	97 b1       	in	r25, 0x07	; 7
 1b2:	90 7e       	andi	r25, 0xE0	; 224
 1b4:	97 b9       	out	0x07, r25	; 7
	ADMUX|=(adc);
 1b6:	97 b1       	in	r25, 0x07	; 7
 1b8:	89 2b       	or	r24, r25
 1ba:	87 b9       	out	0x07, r24	; 7
	//`ADMUX=0b01
	
	ADCSRA|=(1<<ADEN)|(1<<ADSC);
 1bc:	86 b1       	in	r24, 0x06	; 6
 1be:	80 6c       	ori	r24, 0xC0	; 192
 1c0:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<ADIF))==0);
 1c2:	34 9b       	sbis	0x06, 4	; 6
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <read_adc+0x12>
	return ADC;
 1c6:	84 b1       	in	r24, 0x04	; 4
 1c8:	95 b1       	in	r25, 0x05	; 5
}
 1ca:	08 95       	ret

000001cc <main>:
#include <util/delay.h>
#include "lcd.h"
#include "adc.h"
int main(void)
{
	lcd_init();
 1cc:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_init>
	init_adc();
 1d0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <init_adc>
		
		x=read_adc(2);
		lcd_goto(0,1);
		lcd_printi(x);
		lcd_goto(3,1);
		lcd_prints("% REFLECTION");
 1d4:	05 e6       	ldi	r16, 0x65	; 101
 1d6:	10 e0       	ldi	r17, 0x00	; 0
	init_adc();
	int x;
	while(1)
	{
		
		x=read_adc(2);
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <read_adc>
 1de:	ec 01       	movw	r28, r24
		lcd_goto(0,1);
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_goto>
		lcd_printi(x);
 1e8:	ce 01       	movw	r24, r28
 1ea:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_printi>
		lcd_goto(3,1);
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_goto>
		lcd_prints("% REFLECTION");
 1f6:	c8 01       	movw	r24, r16
 1f8:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_prints>
 1fc:	ed cf       	rjmp	.-38     	; 0x1d8 <main+0xc>

000001fe <itoa>:
 1fe:	fb 01       	movw	r30, r22
 200:	9f 01       	movw	r18, r30
 202:	e8 94       	clt
 204:	42 30       	cpi	r20, 0x02	; 2
 206:	c4 f0       	brlt	.+48     	; 0x238 <itoa+0x3a>
 208:	45 32       	cpi	r20, 0x25	; 37
 20a:	b4 f4       	brge	.+44     	; 0x238 <itoa+0x3a>
 20c:	4a 30       	cpi	r20, 0x0A	; 10
 20e:	29 f4       	brne	.+10     	; 0x21a <itoa+0x1c>
 210:	97 fb       	bst	r25, 7
 212:	1e f4       	brtc	.+6      	; 0x21a <itoa+0x1c>
 214:	90 95       	com	r25
 216:	81 95       	neg	r24
 218:	9f 4f       	sbci	r25, 0xFF	; 255
 21a:	64 2f       	mov	r22, r20
 21c:	77 27       	eor	r23, r23
 21e:	0e 94 30 01 	call	0x260	; 0x260 <__udivmodhi4>
 222:	80 5d       	subi	r24, 0xD0	; 208
 224:	8a 33       	cpi	r24, 0x3A	; 58
 226:	0c f0       	brlt	.+2      	; 0x22a <itoa+0x2c>
 228:	89 5d       	subi	r24, 0xD9	; 217
 22a:	81 93       	st	Z+, r24
 22c:	cb 01       	movw	r24, r22
 22e:	00 97       	sbiw	r24, 0x00	; 0
 230:	a1 f7       	brne	.-24     	; 0x21a <itoa+0x1c>
 232:	16 f4       	brtc	.+4      	; 0x238 <itoa+0x3a>
 234:	5d e2       	ldi	r21, 0x2D	; 45
 236:	51 93       	st	Z+, r21
 238:	10 82       	st	Z, r1
 23a:	c9 01       	movw	r24, r18
 23c:	0c 94 20 01 	jmp	0x240	; 0x240 <strrev>

00000240 <strrev>:
 240:	dc 01       	movw	r26, r24
 242:	fc 01       	movw	r30, r24
 244:	67 2f       	mov	r22, r23
 246:	71 91       	ld	r23, Z+
 248:	77 23       	and	r23, r23
 24a:	e1 f7       	brne	.-8      	; 0x244 <strrev+0x4>
 24c:	32 97       	sbiw	r30, 0x02	; 2
 24e:	04 c0       	rjmp	.+8      	; 0x258 <strrev+0x18>
 250:	7c 91       	ld	r23, X
 252:	6d 93       	st	X+, r22
 254:	70 83       	st	Z, r23
 256:	62 91       	ld	r22, -Z
 258:	ae 17       	cp	r26, r30
 25a:	bf 07       	cpc	r27, r31
 25c:	c8 f3       	brcs	.-14     	; 0x250 <strrev+0x10>
 25e:	08 95       	ret

00000260 <__udivmodhi4>:
 260:	aa 1b       	sub	r26, r26
 262:	bb 1b       	sub	r27, r27
 264:	51 e1       	ldi	r21, 0x11	; 17
 266:	07 c0       	rjmp	.+14     	; 0x276 <__udivmodhi4_ep>

00000268 <__udivmodhi4_loop>:
 268:	aa 1f       	adc	r26, r26
 26a:	bb 1f       	adc	r27, r27
 26c:	a6 17       	cp	r26, r22
 26e:	b7 07       	cpc	r27, r23
 270:	10 f0       	brcs	.+4      	; 0x276 <__udivmodhi4_ep>
 272:	a6 1b       	sub	r26, r22
 274:	b7 0b       	sbc	r27, r23

00000276 <__udivmodhi4_ep>:
 276:	88 1f       	adc	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	5a 95       	dec	r21
 27c:	a9 f7       	brne	.-22     	; 0x268 <__udivmodhi4_loop>
 27e:	80 95       	com	r24
 280:	90 95       	com	r25
 282:	bc 01       	movw	r22, r24
 284:	cd 01       	movw	r24, r26
 286:	08 95       	ret

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
