
poly_fire_fighting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000880  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000324  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000008a  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000298  00000000  00000000  00000cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000f48  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000c3  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define F_CPU 16000000
#include <avr/io.h>
#include <compat/deprecated.h>
int main(void)
{
	DDRC=0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 bb       	out	0x14, r24	; 20
	DDRB=0x00;
  96:	17 ba       	out	0x17, r1	; 23
	PORTB=0xff;
  98:	88 bb       	out	0x18, r24	; 24
	while(1)
	{
		PORTB=0xff;
		if (bit_is_clear(PINB,0))
		PORTC=0b00001001;
  9a:	99 e0       	ldi	r25, 0x09	; 9
		else if (bit_is_clear(PINB,2))
		PORTC=0b00000101;
	    else if (bit_is_clear(PINB,3))
		PORTC=0b00000110;
		else if (bit_is_clear(PINB,4))
		PORTC=0b00010000;
  9c:	50 e1       	ldi	r21, 0x10	; 16
		else if (bit_is_clear(PINB,1))
		PORTC=0b00001010;
		else if (bit_is_clear(PINB,2))
		PORTC=0b00000101;
	    else if (bit_is_clear(PINB,3))
		PORTC=0b00000110;
  9e:	46 e0       	ldi	r20, 0x06	; 6
		if (bit_is_clear(PINB,0))
		PORTC=0b00001001;
		else if (bit_is_clear(PINB,1))
		PORTC=0b00001010;
		else if (bit_is_clear(PINB,2))
		PORTC=0b00000101;
  a0:	35 e0       	ldi	r19, 0x05	; 5
	{
		PORTB=0xff;
		if (bit_is_clear(PINB,0))
		PORTC=0b00001001;
		else if (bit_is_clear(PINB,1))
		PORTC=0b00001010;
  a2:	2a e0       	ldi	r18, 0x0A	; 10
	DDRC=0xff;
	DDRB=0x00;
	PORTB=0xff;
	while(1)
	{
		PORTB=0xff;
  a4:	88 bb       	out	0x18, r24	; 24
		if (bit_is_clear(PINB,0))
  a6:	b0 99       	sbic	0x16, 0	; 22
  a8:	02 c0       	rjmp	.+4      	; 0xae <main+0x1c>
		PORTC=0b00001001;
  aa:	95 bb       	out	0x15, r25	; 21
  ac:	fb cf       	rjmp	.-10     	; 0xa4 <main+0x12>
		else if (bit_is_clear(PINB,1))
  ae:	b1 99       	sbic	0x16, 1	; 22
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <main+0x24>
		PORTC=0b00001010;
  b2:	25 bb       	out	0x15, r18	; 21
  b4:	f7 cf       	rjmp	.-18     	; 0xa4 <main+0x12>
		else if (bit_is_clear(PINB,2))
  b6:	b2 99       	sbic	0x16, 2	; 22
  b8:	02 c0       	rjmp	.+4      	; 0xbe <main+0x2c>
		PORTC=0b00000101;
  ba:	35 bb       	out	0x15, r19	; 21
  bc:	f3 cf       	rjmp	.-26     	; 0xa4 <main+0x12>
	    else if (bit_is_clear(PINB,3))
  be:	b3 99       	sbic	0x16, 3	; 22
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <main+0x34>
		PORTC=0b00000110;
  c2:	45 bb       	out	0x15, r20	; 21
  c4:	ef cf       	rjmp	.-34     	; 0xa4 <main+0x12>
		else if (bit_is_clear(PINB,4))
  c6:	b4 99       	sbic	0x16, 4	; 22
  c8:	02 c0       	rjmp	.+4      	; 0xce <main+0x3c>
		PORTC=0b00010000;
  ca:	55 bb       	out	0x15, r21	; 21
  cc:	eb cf       	rjmp	.-42     	; 0xa4 <main+0x12>
		else
		PORTC=0b00000000;	
  ce:	15 ba       	out	0x15, r1	; 21
  d0:	e9 cf       	rjmp	.-46     	; 0xa4 <main+0x12>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
