
lpg_gas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000003fe  00000492  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000a6  008000a6  000004d8  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000f80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009bc  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000208  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e8  00000000  00000000  00001be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  000020cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001bd  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001eb  00000000  00000000  000023cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 ea       	ldi	r26, 0xA6	; 166
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3a       	cpi	r26, 0xAA	; 170
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 14 01 	call	0x228	; 0x228 <main>
  8a:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_usart>:
//USART
void init_usart(char baud)
{
	//Communication protocol set
	//with 1 stop bit & 8 data bits
	UCSRC=(1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL);
  92:	96 e8       	ldi	r25, 0x86	; 134
  94:	90 bd       	out	0x20, r25	; 32
	
	//Reception & transmission is enabled
	//Reception of data will occur on interrupt
	UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
  96:	98 e9       	ldi	r25, 0x98	; 152
  98:	9a b9       	out	0x0a, r25	; 10
	
	//Baud rate = 9600
	UBRRH=0x00;
  9a:	10 bc       	out	0x20, r1	; 32
	UBRRL=baud;
  9c:	89 b9       	out	0x09, r24	; 9
}
  9e:	08 95       	ret

000000a0 <transmit_char>:

void transmit_char(char data)
{
	loop_until_bit_is_set(UCSRA,UDRE);
  a0:	5d 9b       	sbis	0x0b, 5	; 11
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <transmit_char>
	UDR=data;
  a4:	8c b9       	out	0x0c, r24	; 12
}
  a6:	08 95       	ret

000000a8 <transmit_string>:

void transmit_string(char *data)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	ec 01       	movw	r28, r24
	while(*data)
  ae:	88 81       	ld	r24, Y
  b0:	88 23       	and	r24, r24
  b2:	31 f0       	breq	.+12     	; 0xc0 <transmit_string+0x18>
{
	loop_until_bit_is_set(UCSRA,UDRE);
	UDR=data;
}

void transmit_string(char *data)
  b4:	21 96       	adiw	r28, 0x01	; 1
{
	while(*data)
	{
		transmit_char(*data);
  b6:	0e 94 50 00 	call	0xa0	; 0xa0 <transmit_char>
	UDR=data;
}

void transmit_string(char *data)
{
	while(*data)
  ba:	89 91       	ld	r24, Y+
  bc:	88 23       	and	r24, r24
  be:	d9 f7       	brne	.-10     	; 0xb6 <transmit_string+0xe>
	{
		transmit_char(*data);
		data++;
	}
		
}
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <USART_Receive>:

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) )
  c6:	5f 9b       	sbis	0x0b, 7	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR;
  ca:	8c b1       	in	r24, 0x0c	; 12
}
  cc:	08 95       	ret

000000ce <write_command>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	ef e3       	ldi	r30, 0x3F	; 63
  d0:	ff e1       	ldi	r31, 0x1F	; 31
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <write_command+0x4>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <write_command+0xa>
  d8:	00 00       	nop

void write_command(unsigned char comm)
{
	
	_delay_ms(2);
	LCD_PORT=((comm & 0xF0)|(1<<en)); 	//Sending 4 MSB bits of command, & Enable=1,RW=0,RS=0;
  da:	98 2f       	mov	r25, r24
  dc:	90 7f       	andi	r25, 0xF0	; 240
  de:	92 60       	ori	r25, 0x02	; 2
  e0:	9b bb       	out	0x1b, r25	; 27
	cbi(LCD_PORT,en);
  e2:	d9 98       	cbi	0x1b, 1	; 27
	
	LCD_PORT=((comm<<4)|(1<<en)); 		//Sending 4 LSB bits of command
  e4:	82 95       	swap	r24
  e6:	80 7f       	andi	r24, 0xF0	; 240
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	8b bb       	out	0x1b, r24	; 27
	cbi(LCD_PORT,en);
  ec:	d9 98       	cbi	0x1b, 1	; 27
}
  ee:	08 95       	ret

000000f0 <lcd_init>:
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	95 ea       	ldi	r25, 0xA5	; 165
  f4:	ae e0       	ldi	r26, 0x0E	; 14
  f6:	81 50       	subi	r24, 0x01	; 1
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	a0 40       	sbci	r26, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <lcd_init+0x6>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_init+0x10>
 100:	00 00       	nop
//LCD
void lcd_init(void)
{
	_delay_ms(300);
	
	LCD_DDR=0b11110011;					//Initialize the LCD port first
 102:	83 ef       	ldi	r24, 0xF3	; 243
 104:	8a bb       	out	0x1a, r24	; 26
	
	write_command(0x80);					//initial address of DDRAM for first line
 106:	80 e8       	ldi	r24, 0x80	; 128
 108:	0e 94 67 00 	call	0xce	; 0xce <write_command>
	write_command(0x28);					//To select 4 bit data
 10c:	88 e2       	ldi	r24, 0x28	; 40
 10e:	0e 94 67 00 	call	0xce	; 0xce <write_command>
		
	write_command(0x0e);					//Command to on the display & cursor blink/blink off
 112:	8e e0       	ldi	r24, 0x0E	; 14
 114:	0e 94 67 00 	call	0xce	; 0xce <write_command>
	write_command(0x01);					//Command to clear LCD display
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 67 00 	call	0xce	; 0xce <write_command>
	
	write_command(0x06);					//Command for character entry mode
 11e:	86 e0       	ldi	r24, 0x06	; 6
 120:	0e 94 67 00 	call	0xce	; 0xce <write_command>
}
 124:	08 95       	ret

00000126 <write_data>:
 126:	ef e3       	ldi	r30, 0x3F	; 63
 128:	ff e1       	ldi	r31, 0x1F	; 31
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <write_data+0x4>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <write_data+0xa>
 130:	00 00       	nop

 void write_data(unsigned char lcd_data)
{
	_delay_ms(2);
	
	LCD_PORT=((lcd_data & 0xF0)|(1<<en)|(1<<rs)); 	//Sending 4 MSB bits of command, & Enable=1,RW=0,RS=1;
 132:	98 2f       	mov	r25, r24
 134:	90 7f       	andi	r25, 0xF0	; 240
 136:	93 60       	ori	r25, 0x03	; 3
 138:	9b bb       	out	0x1b, r25	; 27
	cbi(LCD_PORT,en);
 13a:	d9 98       	cbi	0x1b, 1	; 27
	
	LCD_PORT=((lcd_data<<4)|(1<<en)|(1<<rs)); 		//Sending 4 LSB bits of command
 13c:	82 95       	swap	r24
 13e:	80 7f       	andi	r24, 0xF0	; 240
 140:	83 60       	ori	r24, 0x03	; 3
 142:	8b bb       	out	0x1b, r24	; 27
	cbi(LCD_PORT,en);
 144:	d9 98       	cbi	0x1b, 1	; 27
}	
 146:	08 95       	ret

00000148 <lcd_prints>:

void lcd_prints(char *print_str)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
	while(*print_str)
 14e:	88 81       	ld	r24, Y
 150:	88 23       	and	r24, r24
 152:	31 f0       	breq	.+12     	; 0x160 <lcd_prints+0x18>
	
	LCD_PORT=((lcd_data<<4)|(1<<en)|(1<<rs)); 		//Sending 4 LSB bits of command
	cbi(LCD_PORT,en);
}	

void lcd_prints(char *print_str)
 154:	21 96       	adiw	r28, 0x01	; 1
{
	while(*print_str)
	{
		if(*print_str=='\0')
		break;
		write_data(*print_str);
 156:	0e 94 93 00 	call	0x126	; 0x126 <write_data>
	cbi(LCD_PORT,en);
}	

void lcd_prints(char *print_str)
{
	while(*print_str)
 15a:	89 91       	ld	r24, Y+
 15c:	88 23       	and	r24, r24
 15e:	d9 f7       	brne	.-10     	; 0x156 <lcd_prints+0xe>
		if(*print_str=='\0')
		break;
		write_data(*print_str);
		print_str++;
	}
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <lcd_printi>:

void lcd_printi(int num)
{
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	00 d0       	rcall	.+0      	; 0x16c <lcd_printi+0x6>
 16c:	00 d0       	rcall	.+0      	; 0x16e <lcd_printi+0x8>
 16e:	0f 92       	push	r0
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
	char buff[]={'0','0','0','0','0'};
 174:	de 01       	movw	r26, r28
 176:	11 96       	adiw	r26, 0x01	; 1
 178:	e0 e6       	ldi	r30, 0x60	; 96
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	25 e0       	ldi	r18, 0x05	; 5
 17e:	01 90       	ld	r0, Z+
 180:	0d 92       	st	X+, r0
 182:	21 50       	subi	r18, 0x01	; 1
 184:	e1 f7       	brne	.-8      	; 0x17e <lcd_printi+0x18>
	itoa(num,buff,10);
 186:	be 01       	movw	r22, r28
 188:	6f 5f       	subi	r22, 0xFF	; 255
 18a:	7f 4f       	sbci	r23, 0xFF	; 255
 18c:	4a e0       	ldi	r20, 0x0A	; 10
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	0e 94 b8 01 	call	0x370	; 0x370 <itoa>
	lcd_prints(buff);
 194:	ce 01       	movw	r24, r28
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_prints>
}
 19c:	0f 90       	pop	r0
 19e:	0f 90       	pop	r0
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <lcd_goto>:
			lcd_goto(0,2);
		write_data(data);
}
void lcd_goto(uint8_t x,uint8_t y)
{
	if(y==1)
 1ac:	61 30       	cpi	r22, 0x01	; 1
 1ae:	21 f4       	brne	.+8      	; 0x1b8 <lcd_goto+0xc>
		write_command(0x80|x);
 1b0:	80 68       	ori	r24, 0x80	; 128
 1b2:	0e 94 67 00 	call	0xce	; 0xce <write_command>
 1b6:	08 95       	ret
	else if(y==2)
 1b8:	62 30       	cpi	r22, 0x02	; 2
 1ba:	19 f4       	brne	.+6      	; 0x1c2 <lcd_goto+0x16>
		write_command(0xC0|x);
 1bc:	80 6c       	ori	r24, 0xC0	; 192
 1be:	0e 94 67 00 	call	0xce	; 0xce <write_command>
 1c2:	08 95       	ret

000001c4 <lcd_printc>:
	itoa(num,buff,10);
	lcd_prints(buff);
}

void lcd_printc(char data)
{
 1c4:	cf 93       	push	r28
 1c6:	c8 2f       	mov	r28, r24
		if(data=='\n')
 1c8:	8a 30       	cpi	r24, 0x0A	; 10
 1ca:	21 f4       	brne	.+8      	; 0x1d4 <lcd_printc+0x10>
			lcd_goto(0,2);
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	62 e0       	ldi	r22, 0x02	; 2
 1d0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_goto>
		write_data(data);
 1d4:	8c 2f       	mov	r24, r28
 1d6:	0e 94 93 00 	call	0x126	; 0x126 <write_data>
}
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <lcd_clrscr>:
		write_command(0xC0|x);
}

void lcd_clrscr(void)
{
	write_command(0x01);
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 67 00 	call	0xce	; 0xce <write_command>
 1e4:	8f ed       	ldi	r24, 0xDF	; 223
 1e6:	9e e2       	ldi	r25, 0x2E	; 46
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_clrscr+0xa>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <lcd_clrscr+0x10>
 1ee:	00 00       	nop
	_delay_ms(3);
	write_command(0x80);
 1f0:	80 e8       	ldi	r24, 0x80	; 128
 1f2:	0e 94 67 00 	call	0xce	; 0xce <write_command>
}
 1f6:	08 95       	ret

000001f8 <init_adc>:
void init_adc(void);
int read_adc(char adc);

void init_adc(void)
{
	ADMUX=(1<<REFS0);
 1f8:	80 e4       	ldi	r24, 0x40	; 64
 1fa:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(1<<ADEN);
 1fc:	87 e8       	ldi	r24, 0x87	; 135
 1fe:	86 b9       	out	0x06, r24	; 6
}
 200:	08 95       	ret

00000202 <read_adc>:

int read_adc(char adc)
{
	ADMUX&=(0b11100000);
 202:	97 b1       	in	r25, 0x07	; 7
 204:	90 7e       	andi	r25, 0xE0	; 224
 206:	97 b9       	out	0x07, r25	; 7
	ADMUX|=(adc);
 208:	97 b1       	in	r25, 0x07	; 7
 20a:	89 2b       	or	r24, r25
 20c:	87 b9       	out	0x07, r24	; 7
	//`ADMUX=0b01
	
	ADCSRA|=(1<<ADEN)|(1<<ADSC);
 20e:	86 b1       	in	r24, 0x06	; 6
 210:	80 6c       	ori	r24, 0xC0	; 192
 212:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<ADIF))==0);
 214:	34 9b       	sbis	0x06, 4	; 6
 216:	fe cf       	rjmp	.-4      	; 0x214 <read_adc+0x12>
	return ADC;
 218:	84 b1       	in	r24, 0x04	; 4
 21a:	95 b1       	in	r25, 0x05	; 5
}
 21c:	08 95       	ret

0000021e <ctrlz>:
		
	}
}
void ctrlz()
{
	loop_until_bit_is_set(UCSRA,UDRE);
 21e:	5d 9b       	sbis	0x0b, 5	; 11
 220:	fe cf       	rjmp	.-4      	; 0x21e <ctrlz>
	UDR=26;
 222:	8a e1       	ldi	r24, 0x1A	; 26
 224:	8c b9       	out	0x0c, r24	; 12
}
 226:	08 95       	ret

00000228 <main>:
int a=0,i=0;
void ctrlz(void);

int main(void)
{	
	init_adc();// initialization of adc
 228:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <init_adc>
	int x;
	init_usart(103); // serial communication initialization 
 22c:	87 e6       	ldi	r24, 0x67	; 103
 22e:	0e 94 49 00 	call	0x92	; 0x92 <init_usart>
	sei();
 232:	78 94       	sei
	lcd_init();//  initialization of lcd
 234:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_init>
	DDRD=0X00; // port d as input
 238:	11 ba       	out	0x11, r1	; 17
	PORTD=0X00; // port d clear
 23a:	12 ba       	out	0x12, r1	; 18
				lcd_init();
				x=read_adc(2); //read the adc value
				lcd_goto(0,1); // set cursor position
				lcd_printi(x); //print acd value
				lcd_goto(0,2); // set cursor position
				lcd_prints(" LPG Reading"); //comment print
 23c:	05 e6       	ldi	r16, 0x65	; 101
 23e:	10 e0       	ldi	r17, 0x00	; 0
			}
     if(x>500) 
	 {
		transmit_string("AT+CMGF=1\r\n");
 240:	0f 2e       	mov	r0, r31
 242:	f2 e7       	ldi	r31, 0x72	; 114
 244:	ef 2e       	mov	r14, r31
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	ff 2e       	mov	r15, r31
 24a:	f0 2d       	mov	r31, r0
		_delay_ms(1000);
		transmit_string("AT+CMGS=");
 24c:	0f 2e       	mov	r0, r31
 24e:	fe e7       	ldi	r31, 0x7E	; 126
 250:	cf 2e       	mov	r12, r31
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	df 2e       	mov	r13, r31
 256:	f0 2d       	mov	r31, r0
		_delay_ms(1000);
		transmit_char('"');
		_delay_ms(1000);
		transmit_string("8149438930");
 258:	0f 2e       	mov	r0, r31
 25a:	f7 e8       	ldi	r31, 0x87	; 135
 25c:	af 2e       	mov	r10, r31
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	bf 2e       	mov	r11, r31
 262:	f0 2d       	mov	r31, r0
		_delay_ms(1000);
		transmit_char('"');
		_delay_ms(1000);
		transmit_string("\r\n");
 264:	0f 2e       	mov	r0, r31
 266:	f2 e9       	ldi	r31, 0x92	; 146
 268:	8f 2e       	mov	r8, r31
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	9f 2e       	mov	r9, r31
 26e:	f0 2d       	mov	r31, r0
		_delay_ms(1000);
        transmit_string("LPG Gas Leakage");
 270:	0f 2e       	mov	r0, r31
 272:	f5 e9       	ldi	r31, 0x95	; 149
 274:	6f 2e       	mov	r6, r31
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	7f 2e       	mov	r7, r31
 27a:	f0 2d       	mov	r31, r0
	DDRD=0X00; // port d as input
	PORTD=0X00; // port d clear
	while(1) //continous operation
	{
			{
				lcd_init();
 27c:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_init>
				x=read_adc(2); //read the adc value
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	0e 94 01 01 	call	0x202	; 0x202 <read_adc>
 286:	ec 01       	movw	r28, r24
				lcd_goto(0,1); // set cursor position
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_goto>
				lcd_printi(x); //print acd value
 290:	ce 01       	movw	r24, r28
 292:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_printi>
				lcd_goto(0,2); // set cursor position
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	62 e0       	ldi	r22, 0x02	; 2
 29a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_goto>
				lcd_prints(" LPG Reading"); //comment print
 29e:	c8 01       	movw	r24, r16
 2a0:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_prints>
			}
     if(x>500) 
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	c5 3f       	cpi	r28, 0xF5	; 245
 2a8:	d8 07       	cpc	r29, r24
 2aa:	44 f3       	brlt	.-48     	; 0x27c <main+0x54>
	 {
		transmit_string("AT+CMGF=1\r\n");
 2ac:	c7 01       	movw	r24, r14
 2ae:	0e 94 54 00 	call	0xa8	; 0xa8 <transmit_string>
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	93 ed       	ldi	r25, 0xD3	; 211
 2b6:	a0 e3       	ldi	r26, 0x30	; 48
 2b8:	81 50       	subi	r24, 0x01	; 1
 2ba:	90 40       	sbci	r25, 0x00	; 0
 2bc:	a0 40       	sbci	r26, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <main+0x90>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x9a>
 2c2:	00 00       	nop
		_delay_ms(1000);
		transmit_string("AT+CMGS=");
 2c4:	c6 01       	movw	r24, r12
 2c6:	0e 94 54 00 	call	0xa8	; 0xa8 <transmit_string>
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	93 ed       	ldi	r25, 0xD3	; 211
 2ce:	a0 e3       	ldi	r26, 0x30	; 48
 2d0:	81 50       	subi	r24, 0x01	; 1
 2d2:	90 40       	sbci	r25, 0x00	; 0
 2d4:	a0 40       	sbci	r26, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <main+0xa8>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <main+0xb2>
 2da:	00 00       	nop
		_delay_ms(1000);
		transmit_char('"');
 2dc:	82 e2       	ldi	r24, 0x22	; 34
 2de:	0e 94 50 00 	call	0xa0	; 0xa0 <transmit_char>
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	93 ed       	ldi	r25, 0xD3	; 211
 2e6:	a0 e3       	ldi	r26, 0x30	; 48
 2e8:	81 50       	subi	r24, 0x01	; 1
 2ea:	90 40       	sbci	r25, 0x00	; 0
 2ec:	a0 40       	sbci	r26, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <main+0xc0>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <main+0xca>
 2f2:	00 00       	nop
		_delay_ms(1000);
		transmit_string("8149438930");
 2f4:	c5 01       	movw	r24, r10
 2f6:	0e 94 54 00 	call	0xa8	; 0xa8 <transmit_string>
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	93 ed       	ldi	r25, 0xD3	; 211
 2fe:	a0 e3       	ldi	r26, 0x30	; 48
 300:	81 50       	subi	r24, 0x01	; 1
 302:	90 40       	sbci	r25, 0x00	; 0
 304:	a0 40       	sbci	r26, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <main+0xd8>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0xe2>
 30a:	00 00       	nop
		_delay_ms(1000);
		transmit_char('"');
 30c:	82 e2       	ldi	r24, 0x22	; 34
 30e:	0e 94 50 00 	call	0xa0	; 0xa0 <transmit_char>
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	93 ed       	ldi	r25, 0xD3	; 211
 316:	a0 e3       	ldi	r26, 0x30	; 48
 318:	81 50       	subi	r24, 0x01	; 1
 31a:	90 40       	sbci	r25, 0x00	; 0
 31c:	a0 40       	sbci	r26, 0x00	; 0
 31e:	e1 f7       	brne	.-8      	; 0x318 <main+0xf0>
 320:	00 c0       	rjmp	.+0      	; 0x322 <main+0xfa>
 322:	00 00       	nop
		_delay_ms(1000);
		transmit_string("\r\n");
 324:	c4 01       	movw	r24, r8
 326:	0e 94 54 00 	call	0xa8	; 0xa8 <transmit_string>
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	93 ed       	ldi	r25, 0xD3	; 211
 32e:	a0 e3       	ldi	r26, 0x30	; 48
 330:	81 50       	subi	r24, 0x01	; 1
 332:	90 40       	sbci	r25, 0x00	; 0
 334:	a0 40       	sbci	r26, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <main+0x108>
 338:	00 c0       	rjmp	.+0      	; 0x33a <main+0x112>
 33a:	00 00       	nop
		_delay_ms(1000);
        transmit_string("LPG Gas Leakage");
 33c:	c3 01       	movw	r24, r6
 33e:	0e 94 54 00 	call	0xa8	; 0xa8 <transmit_string>
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	93 ed       	ldi	r25, 0xD3	; 211
 346:	a0 e3       	ldi	r26, 0x30	; 48
 348:	81 50       	subi	r24, 0x01	; 1
 34a:	90 40       	sbci	r25, 0x00	; 0
 34c:	a0 40       	sbci	r26, 0x00	; 0
 34e:	e1 f7       	brne	.-8      	; 0x348 <main+0x120>
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0x12a>
 352:	00 00       	nop
		_delay_ms(1000);
		ctrlz();
 354:	0e 94 0f 01 	call	0x21e	; 0x21e <ctrlz>
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	93 ed       	ldi	r25, 0xD3	; 211
 35c:	a0 e3       	ldi	r26, 0x30	; 48
 35e:	81 50       	subi	r24, 0x01	; 1
 360:	90 40       	sbci	r25, 0x00	; 0
 362:	a0 40       	sbci	r26, 0x00	; 0
 364:	e1 f7       	brne	.-8      	; 0x35e <main+0x136>
 366:	00 c0       	rjmp	.+0      	; 0x368 <main+0x140>
 368:	00 00       	nop
		_delay_ms(1000);
		ctrlz();
 36a:	0e 94 0f 01 	call	0x21e	; 0x21e <ctrlz>
 36e:	86 cf       	rjmp	.-244    	; 0x27c <main+0x54>

00000370 <itoa>:
 370:	fb 01       	movw	r30, r22
 372:	9f 01       	movw	r18, r30
 374:	e8 94       	clt
 376:	42 30       	cpi	r20, 0x02	; 2
 378:	c4 f0       	brlt	.+48     	; 0x3aa <itoa+0x3a>
 37a:	45 32       	cpi	r20, 0x25	; 37
 37c:	b4 f4       	brge	.+44     	; 0x3aa <itoa+0x3a>
 37e:	4a 30       	cpi	r20, 0x0A	; 10
 380:	29 f4       	brne	.+10     	; 0x38c <itoa+0x1c>
 382:	97 fb       	bst	r25, 7
 384:	1e f4       	brtc	.+6      	; 0x38c <itoa+0x1c>
 386:	90 95       	com	r25
 388:	81 95       	neg	r24
 38a:	9f 4f       	sbci	r25, 0xFF	; 255
 38c:	64 2f       	mov	r22, r20
 38e:	77 27       	eor	r23, r23
 390:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__udivmodhi4>
 394:	80 5d       	subi	r24, 0xD0	; 208
 396:	8a 33       	cpi	r24, 0x3A	; 58
 398:	0c f0       	brlt	.+2      	; 0x39c <itoa+0x2c>
 39a:	89 5d       	subi	r24, 0xD9	; 217
 39c:	81 93       	st	Z+, r24
 39e:	cb 01       	movw	r24, r22
 3a0:	00 97       	sbiw	r24, 0x00	; 0
 3a2:	a1 f7       	brne	.-24     	; 0x38c <itoa+0x1c>
 3a4:	16 f4       	brtc	.+4      	; 0x3aa <itoa+0x3a>
 3a6:	5d e2       	ldi	r21, 0x2D	; 45
 3a8:	51 93       	st	Z+, r21
 3aa:	10 82       	st	Z, r1
 3ac:	c9 01       	movw	r24, r18
 3ae:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <strrev>

000003b2 <strrev>:
 3b2:	dc 01       	movw	r26, r24
 3b4:	fc 01       	movw	r30, r24
 3b6:	67 2f       	mov	r22, r23
 3b8:	71 91       	ld	r23, Z+
 3ba:	77 23       	and	r23, r23
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <strrev+0x4>
 3be:	32 97       	sbiw	r30, 0x02	; 2
 3c0:	04 c0       	rjmp	.+8      	; 0x3ca <strrev+0x18>
 3c2:	7c 91       	ld	r23, X
 3c4:	6d 93       	st	X+, r22
 3c6:	70 83       	st	Z, r23
 3c8:	62 91       	ld	r22, -Z
 3ca:	ae 17       	cp	r26, r30
 3cc:	bf 07       	cpc	r27, r31
 3ce:	c8 f3       	brcs	.-14     	; 0x3c2 <strrev+0x10>
 3d0:	08 95       	ret

000003d2 <__udivmodhi4>:
 3d2:	aa 1b       	sub	r26, r26
 3d4:	bb 1b       	sub	r27, r27
 3d6:	51 e1       	ldi	r21, 0x11	; 17
 3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <__udivmodhi4_ep>

000003da <__udivmodhi4_loop>:
 3da:	aa 1f       	adc	r26, r26
 3dc:	bb 1f       	adc	r27, r27
 3de:	a6 17       	cp	r26, r22
 3e0:	b7 07       	cpc	r27, r23
 3e2:	10 f0       	brcs	.+4      	; 0x3e8 <__udivmodhi4_ep>
 3e4:	a6 1b       	sub	r26, r22
 3e6:	b7 0b       	sbc	r27, r23

000003e8 <__udivmodhi4_ep>:
 3e8:	88 1f       	adc	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	5a 95       	dec	r21
 3ee:	a9 f7       	brne	.-22     	; 0x3da <__udivmodhi4_loop>
 3f0:	80 95       	com	r24
 3f2:	90 95       	com	r25
 3f4:	bc 01       	movw	r22, r24
 3f6:	cd 01       	movw	r24, r26
 3f8:	08 95       	ret

000003fa <_exit>:
 3fa:	f8 94       	cli

000003fc <__stop_program>:
 3fc:	ff cf       	rjmp	.-2      	; 0x3fc <__stop_program>
