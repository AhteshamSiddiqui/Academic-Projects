
heart_rate_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000392  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000392  00000426  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080007a  0080007a  00000440  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  00000d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000078d  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001e0  00000000  00000000  00001715  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045b  00000000  00000000  000018f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000187  00000000  00000000  00001e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000199  00000000  00000000  00001faf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 38       	cpi	r26, 0x88	; 136
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
  8a:	0c 94 c7 01 	jmp	0x38e	; 0x38e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <write_command>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	ef e3       	ldi	r30, 0x3F	; 63
  94:	ff e1       	ldi	r31, 0x1F	; 31
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <write_command+0x4>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <write_command+0xa>
  9c:	00 00       	nop

void write_command(unsigned char comm)
{
	
	_delay_ms(2);
	LCD_PORT=((comm & 0xF0)|(1<<en)); 	//Sending 4 MSB bits of command, & Enable=1,RW=0,RS=0;
  9e:	98 2f       	mov	r25, r24
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	92 60       	ori	r25, 0x02	; 2
  a4:	9b bb       	out	0x1b, r25	; 27
	cbi(LCD_PORT,en);
  a6:	d9 98       	cbi	0x1b, 1	; 27
	
	LCD_PORT=((comm<<4)|(1<<en)); 		//Sending 4 LSB bits of command
  a8:	82 95       	swap	r24
  aa:	80 7f       	andi	r24, 0xF0	; 240
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	8b bb       	out	0x1b, r24	; 27
	cbi(LCD_PORT,en);
  b0:	d9 98       	cbi	0x1b, 1	; 27
}
  b2:	08 95       	ret

000000b4 <lcd_init>:
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	95 ea       	ldi	r25, 0xA5	; 165
  b8:	ae e0       	ldi	r26, 0x0E	; 14
  ba:	81 50       	subi	r24, 0x01	; 1
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	a0 40       	sbci	r26, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <lcd_init+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_init+0x10>
  c4:	00 00       	nop
//LCD
void lcd_init(void)
{
	_delay_ms(300);
	
	LCD_DDR=0b11110011;					//Initialize the LCD port first
  c6:	83 ef       	ldi	r24, 0xF3	; 243
  c8:	8a bb       	out	0x1a, r24	; 26
	
	write_command(0x80);					//initial address of DDRAM for first line
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
	write_command(0x28);					//To select 4 bit data
  d0:	88 e2       	ldi	r24, 0x28	; 40
  d2:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
		
	write_command(0x0e);					//Command to on the display & cursor blink/blink off
  d6:	8e e0       	ldi	r24, 0x0E	; 14
  d8:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
	write_command(0x01);					//Command to clear LCD display
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
	
	write_command(0x06);					//Command for character entry mode
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
}
  e8:	08 95       	ret

000000ea <write_data>:
  ea:	ef e3       	ldi	r30, 0x3F	; 63
  ec:	ff e1       	ldi	r31, 0x1F	; 31
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <write_data+0x4>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <write_data+0xa>
  f4:	00 00       	nop

 void write_data(unsigned char lcd_data)
{
	_delay_ms(2);
	
	LCD_PORT=((lcd_data & 0xF0)|(1<<en)|(1<<rs)); 	//Sending 4 MSB bits of command, & Enable=1,RW=0,RS=1;
  f6:	98 2f       	mov	r25, r24
  f8:	90 7f       	andi	r25, 0xF0	; 240
  fa:	93 60       	ori	r25, 0x03	; 3
  fc:	9b bb       	out	0x1b, r25	; 27
	cbi(LCD_PORT,en);
  fe:	d9 98       	cbi	0x1b, 1	; 27
	
	LCD_PORT=((lcd_data<<4)|(1<<en)|(1<<rs)); 		//Sending 4 LSB bits of command
 100:	82 95       	swap	r24
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	83 60       	ori	r24, 0x03	; 3
 106:	8b bb       	out	0x1b, r24	; 27
	cbi(LCD_PORT,en);
 108:	d9 98       	cbi	0x1b, 1	; 27
}	
 10a:	08 95       	ret

0000010c <lcd_prints>:

void lcd_prints(char *print_str)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	ec 01       	movw	r28, r24
	while(*print_str)
 112:	88 81       	ld	r24, Y
 114:	88 23       	and	r24, r24
 116:	31 f0       	breq	.+12     	; 0x124 <lcd_prints+0x18>
	
	LCD_PORT=((lcd_data<<4)|(1<<en)|(1<<rs)); 		//Sending 4 LSB bits of command
	cbi(LCD_PORT,en);
}	

void lcd_prints(char *print_str)
 118:	21 96       	adiw	r28, 0x01	; 1
{
	while(*print_str)
	{
		if(*print_str=='\0')
		break;
		write_data(*print_str);
 11a:	0e 94 75 00 	call	0xea	; 0xea <write_data>
	cbi(LCD_PORT,en);
}	

void lcd_prints(char *print_str)
{
	while(*print_str)
 11e:	89 91       	ld	r24, Y+
 120:	88 23       	and	r24, r24
 122:	d9 f7       	brne	.-10     	; 0x11a <lcd_prints+0xe>
		if(*print_str=='\0')
		break;
		write_data(*print_str);
		print_str++;
	}
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <lcd_printi>:

void lcd_printi(int num)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	00 d0       	rcall	.+0      	; 0x130 <lcd_printi+0x6>
 130:	00 d0       	rcall	.+0      	; 0x132 <lcd_printi+0x8>
 132:	0f 92       	push	r0
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
	char buff[]={'0','0','0','0','0'};
 138:	de 01       	movw	r26, r28
 13a:	11 96       	adiw	r26, 0x01	; 1
 13c:	e0 e6       	ldi	r30, 0x60	; 96
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	25 e0       	ldi	r18, 0x05	; 5
 142:	01 90       	ld	r0, Z+
 144:	0d 92       	st	X+, r0
 146:	21 50       	subi	r18, 0x01	; 1
 148:	e1 f7       	brne	.-8      	; 0x142 <lcd_printi+0x18>
	itoa(num,buff,10);
 14a:	be 01       	movw	r22, r28
 14c:	6f 5f       	subi	r22, 0xFF	; 255
 14e:	7f 4f       	sbci	r23, 0xFF	; 255
 150:	4a e0       	ldi	r20, 0x0A	; 10
 152:	50 e0       	ldi	r21, 0x00	; 0
 154:	0e 94 82 01 	call	0x304	; 0x304 <itoa>
	lcd_prints(buff);
 158:	ce 01       	movw	r24, r28
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_prints>
}
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_goto>:
			lcd_goto(0,2);
		write_data(data);
}
void lcd_goto(uint8_t x,uint8_t y)
{
	if(y==1)
 170:	61 30       	cpi	r22, 0x01	; 1
 172:	21 f4       	brne	.+8      	; 0x17c <lcd_goto+0xc>
		write_command(0x80|x);
 174:	80 68       	ori	r24, 0x80	; 128
 176:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
 17a:	08 95       	ret
	else if(y==2)
 17c:	62 30       	cpi	r22, 0x02	; 2
 17e:	19 f4       	brne	.+6      	; 0x186 <lcd_goto+0x16>
		write_command(0xC0|x);
 180:	80 6c       	ori	r24, 0xC0	; 192
 182:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
 186:	08 95       	ret

00000188 <lcd_printc>:
	itoa(num,buff,10);
	lcd_prints(buff);
}

void lcd_printc(char data)
{
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24
		if(data=='\n')
 18c:	8a 30       	cpi	r24, 0x0A	; 10
 18e:	21 f4       	brne	.+8      	; 0x198 <lcd_printc+0x10>
			lcd_goto(0,2);
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_goto>
		write_data(data);
 198:	8c 2f       	mov	r24, r28
 19a:	0e 94 75 00 	call	0xea	; 0xea <write_data>
}
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <lcd_clrscr>:
		write_command(0xC0|x);
}

void lcd_clrscr(void)
{
	write_command(0x01);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
 1a8:	8f ed       	ldi	r24, 0xDF	; 223
 1aa:	9e e2       	ldi	r25, 0x2E	; 46
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_clrscr+0xa>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_clrscr+0x10>
 1b2:	00 00       	nop
	_delay_ms(3);
	write_command(0x80);
 1b4:	80 e8       	ldi	r24, 0x80	; 128
 1b6:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
}
 1ba:	08 95       	ret

000001bc <timer>:
	  
    }
}
void timer()
{
	x=0;
 1bc:	10 92 83 00 	sts	0x0083, r1
 1c0:	10 92 82 00 	sts	0x0082, r1
	s=s+1;
 1c4:	80 91 80 00 	lds	r24, 0x0080
 1c8:	90 91 81 00 	lds	r25, 0x0081
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	90 93 81 00 	sts	0x0081, r25
 1d2:	80 93 80 00 	sts	0x0080, r24
	if (s>60)
 1d6:	8d 33       	cpi	r24, 0x3D	; 61
 1d8:	91 05       	cpc	r25, r1
 1da:	6c f0       	brlt	.+26     	; 0x1f6 <timer+0x3a>
	{
		s=0;
 1dc:	10 92 81 00 	sts	0x0081, r1
 1e0:	10 92 80 00 	sts	0x0080, r1
		m++;	
 1e4:	80 91 7e 00 	lds	r24, 0x007E
 1e8:	90 91 7f 00 	lds	r25, 0x007F
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	90 93 7f 00 	sts	0x007F, r25
 1f2:	80 93 7e 00 	sts	0x007E, r24
		 	 
	}

	   if (m>6)
 1f6:	80 91 7e 00 	lds	r24, 0x007E
 1fa:	90 91 7f 00 	lds	r25, 0x007F
 1fe:	87 30       	cpi	r24, 0x07	; 7
 200:	91 05       	cpc	r25, r1
 202:	dc f0       	brlt	.+54     	; 0x23a <timer+0x7e>
	   {
		   m=0;
 204:	10 92 7f 00 	sts	0x007F, r1
 208:	10 92 7e 00 	sts	0x007E, r1
		   h--;
 20c:	80 91 78 00 	lds	r24, 0x0078
 210:	90 91 79 00 	lds	r25, 0x0079
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	90 93 79 00 	sts	0x0079, r25
 21a:	80 93 78 00 	sts	0x0078, r24
		  		 lcd_goto(0,2);
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	62 e0       	ldi	r22, 0x02	; 2
 222:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_goto>
				 lcd_prints("Please Wait...");
 226:	85 e6       	ldi	r24, 0x65	; 101
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_prints>
		  		 lcd_printi(h);
 22e:	80 91 78 00 	lds	r24, 0x0078
 232:	90 91 79 00 	lds	r25, 0x0079
 236:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_printi>
	   }
	   	   
	   if (h==0)
 23a:	80 91 78 00 	lds	r24, 0x0078
 23e:	90 91 79 00 	lds	r25, 0x0079
 242:	00 97       	sbiw	r24, 0x00	; 0
 244:	69 f5       	brne	.+90     	; 0x2a0 <timer+0xe4>
	   {
	  bpm=j*6;
 246:	80 91 7c 00 	lds	r24, 0x007C
 24a:	90 91 7d 00 	lds	r25, 0x007D
 24e:	9c 01       	movw	r18, r24
 250:	22 0f       	add	r18, r18
 252:	33 1f       	adc	r19, r19
 254:	82 0f       	add	r24, r18
 256:	93 1f       	adc	r25, r19
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	90 93 7b 00 	sts	0x007B, r25
 260:	80 93 7a 00 	sts	0x007A, r24
	  lcd_clrscr();
 264:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_clrscr>
      lcd_goto(0,1);
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_goto>
      lcd_printi(bpm);
 270:	80 91 7a 00 	lds	r24, 0x007A
 274:	90 91 7b 00 	lds	r25, 0x007B
 278:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_printi>
	  lcd_goto(4,1);
 27c:	84 e0       	ldi	r24, 0x04	; 4
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_goto>
	  lcd_prints("BPM");
 284:	84 e7       	ldi	r24, 0x74	; 116
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_prints>
	  h=10;
 28c:	8a e0       	ldi	r24, 0x0A	; 10
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	90 93 79 00 	sts	0x0079, r25
 294:	80 93 78 00 	sts	0x0078, r24
	  j=0;
 298:	10 92 7d 00 	sts	0x007D, r1
 29c:	10 92 7c 00 	sts	0x007C, r1
 2a0:	08 95       	ret

000002a2 <main>:
	int j;

int main(void)
{

	lcd_init();
 2a2:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_init>
	DDRD=0x00;
 2a6:	11 ba       	out	0x11, r1	; 17
	PORTD=0xFF;
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	82 bb       	out	0x12, r24	; 18
	int check=1;
 2ac:	c1 e0       	ldi	r28, 0x01	; 1
 2ae:	d0 e0       	ldi	r29, 0x00	; 0
		 j=j+1;
		check=0;   
	   }
	   else if(bit_is_clear(PIND,0) && check==0)
	   {
		   check=1;   
 2b0:	01 e0       	ldi	r16, 0x01	; 1
 2b2:	10 e0       	ldi	r17, 0x00	; 0
	       	   timer();
       	   }
	   if(bit_is_set(PIND,0) && check==1)
	   {
		 j=j+1;
		check=0;   
 2b4:	ee 24       	eor	r14, r14
 2b6:	ff 24       	eor	r15, r15
 2b8:	01 c0       	rjmp	.+2      	; 0x2bc <main+0x1a>
	   }
	   else if(bit_is_clear(PIND,0) && check==0)
	   {
		   check=1;   
 2ba:	e8 01       	movw	r28, r16
	PORTD=0xFF;
	int check=1;

    while(1)
    {
		   x++;
 2bc:	80 91 82 00 	lds	r24, 0x0082
 2c0:	90 91 83 00 	lds	r25, 0x0083
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	90 93 83 00 	sts	0x0083, r25
 2ca:	80 93 82 00 	sts	0x0082, r24
       	   if (x==1600)
 2ce:	26 e0       	ldi	r18, 0x06	; 6
 2d0:	80 34       	cpi	r24, 0x40	; 64
 2d2:	92 07       	cpc	r25, r18
 2d4:	11 f4       	brne	.+4      	; 0x2da <main+0x38>
       	   {
	       	   timer();
 2d6:	0e 94 de 00 	call	0x1bc	; 0x1bc <timer>
       	   }
	   if(bit_is_set(PIND,0) && check==1)
 2da:	80 9b       	sbis	0x10, 0	; 16
 2dc:	0e c0       	rjmp	.+28     	; 0x2fa <main+0x58>
 2de:	c1 30       	cpi	r28, 0x01	; 1
 2e0:	d1 05       	cpc	r29, r1
 2e2:	59 f4       	brne	.+22     	; 0x2fa <main+0x58>
	   {
		 j=j+1;
 2e4:	80 91 7c 00 	lds	r24, 0x007C
 2e8:	90 91 7d 00 	lds	r25, 0x007D
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	90 93 7d 00 	sts	0x007D, r25
 2f2:	80 93 7c 00 	sts	0x007C, r24
		check=0;   
 2f6:	e7 01       	movw	r28, r14
 2f8:	e1 cf       	rjmp	.-62     	; 0x2bc <main+0x1a>
	   }
	   else if(bit_is_clear(PIND,0) && check==0)
 2fa:	80 99       	sbic	0x10, 0	; 16
 2fc:	df cf       	rjmp	.-66     	; 0x2bc <main+0x1a>
 2fe:	20 97       	sbiw	r28, 0x00	; 0
 300:	e1 f2       	breq	.-72     	; 0x2ba <main+0x18>
 302:	dc cf       	rjmp	.-72     	; 0x2bc <main+0x1a>

00000304 <itoa>:
 304:	fb 01       	movw	r30, r22
 306:	9f 01       	movw	r18, r30
 308:	e8 94       	clt
 30a:	42 30       	cpi	r20, 0x02	; 2
 30c:	c4 f0       	brlt	.+48     	; 0x33e <itoa+0x3a>
 30e:	45 32       	cpi	r20, 0x25	; 37
 310:	b4 f4       	brge	.+44     	; 0x33e <itoa+0x3a>
 312:	4a 30       	cpi	r20, 0x0A	; 10
 314:	29 f4       	brne	.+10     	; 0x320 <itoa+0x1c>
 316:	97 fb       	bst	r25, 7
 318:	1e f4       	brtc	.+6      	; 0x320 <itoa+0x1c>
 31a:	90 95       	com	r25
 31c:	81 95       	neg	r24
 31e:	9f 4f       	sbci	r25, 0xFF	; 255
 320:	64 2f       	mov	r22, r20
 322:	77 27       	eor	r23, r23
 324:	0e 94 b3 01 	call	0x366	; 0x366 <__udivmodhi4>
 328:	80 5d       	subi	r24, 0xD0	; 208
 32a:	8a 33       	cpi	r24, 0x3A	; 58
 32c:	0c f0       	brlt	.+2      	; 0x330 <itoa+0x2c>
 32e:	89 5d       	subi	r24, 0xD9	; 217
 330:	81 93       	st	Z+, r24
 332:	cb 01       	movw	r24, r22
 334:	00 97       	sbiw	r24, 0x00	; 0
 336:	a1 f7       	brne	.-24     	; 0x320 <itoa+0x1c>
 338:	16 f4       	brtc	.+4      	; 0x33e <itoa+0x3a>
 33a:	5d e2       	ldi	r21, 0x2D	; 45
 33c:	51 93       	st	Z+, r21
 33e:	10 82       	st	Z, r1
 340:	c9 01       	movw	r24, r18
 342:	0c 94 a3 01 	jmp	0x346	; 0x346 <strrev>

00000346 <strrev>:
 346:	dc 01       	movw	r26, r24
 348:	fc 01       	movw	r30, r24
 34a:	67 2f       	mov	r22, r23
 34c:	71 91       	ld	r23, Z+
 34e:	77 23       	and	r23, r23
 350:	e1 f7       	brne	.-8      	; 0x34a <strrev+0x4>
 352:	32 97       	sbiw	r30, 0x02	; 2
 354:	04 c0       	rjmp	.+8      	; 0x35e <strrev+0x18>
 356:	7c 91       	ld	r23, X
 358:	6d 93       	st	X+, r22
 35a:	70 83       	st	Z, r23
 35c:	62 91       	ld	r22, -Z
 35e:	ae 17       	cp	r26, r30
 360:	bf 07       	cpc	r27, r31
 362:	c8 f3       	brcs	.-14     	; 0x356 <strrev+0x10>
 364:	08 95       	ret

00000366 <__udivmodhi4>:
 366:	aa 1b       	sub	r26, r26
 368:	bb 1b       	sub	r27, r27
 36a:	51 e1       	ldi	r21, 0x11	; 17
 36c:	07 c0       	rjmp	.+14     	; 0x37c <__udivmodhi4_ep>

0000036e <__udivmodhi4_loop>:
 36e:	aa 1f       	adc	r26, r26
 370:	bb 1f       	adc	r27, r27
 372:	a6 17       	cp	r26, r22
 374:	b7 07       	cpc	r27, r23
 376:	10 f0       	brcs	.+4      	; 0x37c <__udivmodhi4_ep>
 378:	a6 1b       	sub	r26, r22
 37a:	b7 0b       	sbc	r27, r23

0000037c <__udivmodhi4_ep>:
 37c:	88 1f       	adc	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	5a 95       	dec	r21
 382:	a9 f7       	brne	.-22     	; 0x36e <__udivmodhi4_loop>
 384:	80 95       	com	r24
 386:	90 95       	com	r25
 388:	bc 01       	movw	r22, r24
 38a:	cd 01       	movw	r24, r26
 38c:	08 95       	ret

0000038e <_exit>:
 38e:	f8 94       	cli

00000390 <__stop_program>:
 390:	ff cf       	rjmp	.-2      	; 0x390 <__stop_program>
