
bp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000034a  000003de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800076  00800076  000003f4  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  000003f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000e98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007c1  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001f3  00000000  00000000  000016f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046a  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00001d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a8  00000000  00000000  00001eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000220  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 26 01 	call	0x24c	; 0x24c <main>
  8a:	0c 94 a3 01 	jmp	0x346	; 0x346 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_usart>:
//USART
void init_usart(char baud)
{
	//Communication protocol set
	//with 1 stop bit & 8 data bits
	UCSRC=(1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL);
  92:	96 e8       	ldi	r25, 0x86	; 134
  94:	90 bd       	out	0x20, r25	; 32
	
	//Reception & transmission is enabled
	//Reception of data will occur on interrupt
	UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
  96:	98 e9       	ldi	r25, 0x98	; 152
  98:	9a b9       	out	0x0a, r25	; 10
	
	//Baud rate = 9600
	UBRRH=0x00;
  9a:	10 bc       	out	0x20, r1	; 32
	UBRRL=baud;
  9c:	89 b9       	out	0x09, r24	; 9
}
  9e:	08 95       	ret

000000a0 <transmit_char>:

void transmit_char(char data)
{
	loop_until_bit_is_set(UCSRA,UDRE);
  a0:	5d 9b       	sbis	0x0b, 5	; 11
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <transmit_char>
	UDR=data;
  a4:	8c b9       	out	0x0c, r24	; 12
}
  a6:	08 95       	ret

000000a8 <transmit_string>:

void transmit_string(char *data)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	ec 01       	movw	r28, r24
	while(*data)
  ae:	88 81       	ld	r24, Y
  b0:	88 23       	and	r24, r24
  b2:	31 f0       	breq	.+12     	; 0xc0 <transmit_string+0x18>
{
	loop_until_bit_is_set(UCSRA,UDRE);
	UDR=data;
}

void transmit_string(char *data)
  b4:	21 96       	adiw	r28, 0x01	; 1
{
	while(*data)
	{
		transmit_char(*data);
  b6:	0e 94 50 00 	call	0xa0	; 0xa0 <transmit_char>
	UDR=data;
}

void transmit_string(char *data)
{
	while(*data)
  ba:	89 91       	ld	r24, Y+
  bc:	88 23       	and	r24, r24
  be:	d9 f7       	brne	.-10     	; 0xb6 <transmit_string+0xe>
	{
		transmit_char(*data);
		data++;
	}
		
}
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <USART_Receive>:

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) )
  c6:	5f 9b       	sbis	0x0b, 7	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR;
  ca:	8c b1       	in	r24, 0x0c	; 12
}
  cc:	08 95       	ret

000000ce <write_command>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	ef e3       	ldi	r30, 0x3F	; 63
  d0:	ff e1       	ldi	r31, 0x1F	; 31
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <write_command+0x4>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <write_command+0xa>
  d8:	00 00       	nop

void write_command(unsigned char comm)
{
	
	_delay_ms(2);
	LCD_PORT=((comm & 0xF0)|(1<<en)); 	//Sending 4 MSB bits of command, & Enable=1,RW=0,RS=0;
  da:	98 2f       	mov	r25, r24
  dc:	90 7f       	andi	r25, 0xF0	; 240
  de:	92 60       	ori	r25, 0x02	; 2
  e0:	9b bb       	out	0x1b, r25	; 27
	cbi(LCD_PORT,en);
  e2:	d9 98       	cbi	0x1b, 1	; 27
	
	LCD_PORT=((comm<<4)|(1<<en)); 		//Sending 4 LSB bits of command
  e4:	82 95       	swap	r24
  e6:	80 7f       	andi	r24, 0xF0	; 240
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	8b bb       	out	0x1b, r24	; 27
	cbi(LCD_PORT,en);
  ec:	d9 98       	cbi	0x1b, 1	; 27
}
  ee:	08 95       	ret

000000f0 <lcd_init>:
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	95 ea       	ldi	r25, 0xA5	; 165
  f4:	ae e0       	ldi	r26, 0x0E	; 14
  f6:	81 50       	subi	r24, 0x01	; 1
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	a0 40       	sbci	r26, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <lcd_init+0x6>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_init+0x10>
 100:	00 00       	nop
//LCD
void lcd_init(void)
{
	_delay_ms(300);
	
	LCD_DDR=0b11110011;					//Initialize the LCD port first
 102:	83 ef       	ldi	r24, 0xF3	; 243
 104:	8a bb       	out	0x1a, r24	; 26
	
	write_command(0x80);					//initial address of DDRAM for first line
 106:	80 e8       	ldi	r24, 0x80	; 128
 108:	0e 94 67 00 	call	0xce	; 0xce <write_command>
	write_command(0x28);					//To select 4 bit data
 10c:	88 e2       	ldi	r24, 0x28	; 40
 10e:	0e 94 67 00 	call	0xce	; 0xce <write_command>
		
	write_command(0x0e);					//Command to on the display & cursor blink/blink off
 112:	8e e0       	ldi	r24, 0x0E	; 14
 114:	0e 94 67 00 	call	0xce	; 0xce <write_command>
	write_command(0x01);					//Command to clear LCD display
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 67 00 	call	0xce	; 0xce <write_command>
	
	write_command(0x06);					//Command for character entry mode
 11e:	86 e0       	ldi	r24, 0x06	; 6
 120:	0e 94 67 00 	call	0xce	; 0xce <write_command>
}
 124:	08 95       	ret

00000126 <write_data>:
 126:	ef e3       	ldi	r30, 0x3F	; 63
 128:	ff e1       	ldi	r31, 0x1F	; 31
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <write_data+0x4>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <write_data+0xa>
 130:	00 00       	nop

 void write_data(unsigned char lcd_data)
{
	_delay_ms(2);
	
	LCD_PORT=((lcd_data & 0xF0)|(1<<en)|(1<<rs)); 	//Sending 4 MSB bits of command, & Enable=1,RW=0,RS=1;
 132:	98 2f       	mov	r25, r24
 134:	90 7f       	andi	r25, 0xF0	; 240
 136:	93 60       	ori	r25, 0x03	; 3
 138:	9b bb       	out	0x1b, r25	; 27
	cbi(LCD_PORT,en);
 13a:	d9 98       	cbi	0x1b, 1	; 27
	
	LCD_PORT=((lcd_data<<4)|(1<<en)|(1<<rs)); 		//Sending 4 LSB bits of command
 13c:	82 95       	swap	r24
 13e:	80 7f       	andi	r24, 0xF0	; 240
 140:	83 60       	ori	r24, 0x03	; 3
 142:	8b bb       	out	0x1b, r24	; 27
	cbi(LCD_PORT,en);
 144:	d9 98       	cbi	0x1b, 1	; 27
}	
 146:	08 95       	ret

00000148 <lcd_prints>:

void lcd_prints(char *print_str)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
	while(*print_str)
 14e:	88 81       	ld	r24, Y
 150:	88 23       	and	r24, r24
 152:	31 f0       	breq	.+12     	; 0x160 <lcd_prints+0x18>
	
	LCD_PORT=((lcd_data<<4)|(1<<en)|(1<<rs)); 		//Sending 4 LSB bits of command
	cbi(LCD_PORT,en);
}	

void lcd_prints(char *print_str)
 154:	21 96       	adiw	r28, 0x01	; 1
{
	while(*print_str)
	{
		if(*print_str=='\0')
		break;
		write_data(*print_str);
 156:	0e 94 93 00 	call	0x126	; 0x126 <write_data>
	cbi(LCD_PORT,en);
}	

void lcd_prints(char *print_str)
{
	while(*print_str)
 15a:	89 91       	ld	r24, Y+
 15c:	88 23       	and	r24, r24
 15e:	d9 f7       	brne	.-10     	; 0x156 <lcd_prints+0xe>
		if(*print_str=='\0')
		break;
		write_data(*print_str);
		print_str++;
	}
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <lcd_printi>:

void lcd_printi(int num)
{
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	00 d0       	rcall	.+0      	; 0x16c <lcd_printi+0x6>
 16c:	00 d0       	rcall	.+0      	; 0x16e <lcd_printi+0x8>
 16e:	0f 92       	push	r0
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
	char buff[]={'0','0','0','0','0'};
 174:	de 01       	movw	r26, r28
 176:	11 96       	adiw	r26, 0x01	; 1
 178:	e0 e6       	ldi	r30, 0x60	; 96
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	25 e0       	ldi	r18, 0x05	; 5
 17e:	01 90       	ld	r0, Z+
 180:	0d 92       	st	X+, r0
 182:	21 50       	subi	r18, 0x01	; 1
 184:	e1 f7       	brne	.-8      	; 0x17e <lcd_printi+0x18>
	itoa(num,buff,10);
 186:	be 01       	movw	r22, r28
 188:	6f 5f       	subi	r22, 0xFF	; 255
 18a:	7f 4f       	sbci	r23, 0xFF	; 255
 18c:	4a e0       	ldi	r20, 0x0A	; 10
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	0e 94 5e 01 	call	0x2bc	; 0x2bc <itoa>
	lcd_prints(buff);
 194:	ce 01       	movw	r24, r28
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_prints>
}
 19c:	0f 90       	pop	r0
 19e:	0f 90       	pop	r0
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <lcd_goto>:
			lcd_goto(0,2);
		write_data(data);
}
void lcd_goto(uint8_t x,uint8_t y)
{
	if(y==1)
 1ac:	61 30       	cpi	r22, 0x01	; 1
 1ae:	21 f4       	brne	.+8      	; 0x1b8 <lcd_goto+0xc>
		write_command(0x80|x);
 1b0:	80 68       	ori	r24, 0x80	; 128
 1b2:	0e 94 67 00 	call	0xce	; 0xce <write_command>
 1b6:	08 95       	ret
	else if(y==2)
 1b8:	62 30       	cpi	r22, 0x02	; 2
 1ba:	19 f4       	brne	.+6      	; 0x1c2 <lcd_goto+0x16>
		write_command(0xC0|x);
 1bc:	80 6c       	ori	r24, 0xC0	; 192
 1be:	0e 94 67 00 	call	0xce	; 0xce <write_command>
 1c2:	08 95       	ret

000001c4 <lcd_printc>:
	itoa(num,buff,10);
	lcd_prints(buff);
}

void lcd_printc(char data)
{
 1c4:	cf 93       	push	r28
 1c6:	c8 2f       	mov	r28, r24
		if(data=='\n')
 1c8:	8a 30       	cpi	r24, 0x0A	; 10
 1ca:	21 f4       	brne	.+8      	; 0x1d4 <lcd_printc+0x10>
			lcd_goto(0,2);
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	62 e0       	ldi	r22, 0x02	; 2
 1d0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_goto>
		write_data(data);
 1d4:	8c 2f       	mov	r24, r28
 1d6:	0e 94 93 00 	call	0x126	; 0x126 <write_data>
}
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <lcd_clrscr>:
		write_command(0xC0|x);
}

void lcd_clrscr(void)
{
	write_command(0x01);
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 67 00 	call	0xce	; 0xce <write_command>
 1e4:	8f ed       	ldi	r24, 0xDF	; 223
 1e6:	9e e2       	ldi	r25, 0x2E	; 46
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_clrscr+0xa>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <lcd_clrscr+0x10>
 1ee:	00 00       	nop
	_delay_ms(3);
	write_command(0x80);
 1f0:	80 e8       	ldi	r24, 0x80	; 128
 1f2:	0e 94 67 00 	call	0xce	; 0xce <write_command>
}
 1f6:	08 95       	ret

000001f8 <__vector_11>:
#include <compat/deprecated.h>
#include <avr/interrupt.h>
char x[13];
int a=0,i=0;
SIGNAL(USART_RXC_vect)
{
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	2f 93       	push	r18
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31
	x[i]=UDR;
 20c:	80 91 76 00 	lds	r24, 0x0076
 210:	90 91 77 00 	lds	r25, 0x0077
 214:	2c b1       	in	r18, 0x0c	; 12
 216:	fc 01       	movw	r30, r24
 218:	e6 58       	subi	r30, 0x86	; 134
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	20 83       	st	Z, r18
	if (i==13)
 21e:	8d 30       	cpi	r24, 0x0D	; 13
 220:	91 05       	cpc	r25, r1
 222:	29 f4       	brne	.+10     	; 0x22e <__vector_11+0x36>
	{
		i=0;
 224:	10 92 77 00 	sts	0x0077, r1
 228:	10 92 76 00 	sts	0x0076, r1
 22c:	05 c0       	rjmp	.+10     	; 0x238 <__vector_11+0x40>
	}
	else
	{
		i++;
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	90 93 77 00 	sts	0x0077, r25
 234:	80 93 76 00 	sts	0x0076, r24
	}
}
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <main>:
int main(void)
{

	init_usart(103);
 24c:	87 e6       	ldi	r24, 0x67	; 103
 24e:	0e 94 49 00 	call	0x92	; 0x92 <init_usart>
	sei();
 252:	78 94       	sei
	lcd_init();
 254:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_init>
	
	while(1)
	{

		lcd_goto(1,1);
		for (a=1;a<=13;a++)
 258:	01 e0       	ldi	r16, 0x01	; 1
 25a:	10 e0       	ldi	r17, 0x00	; 0
		{
			lcd_printc(x[a]);
 25c:	ca e7       	ldi	r28, 0x7A	; 122
 25e:	d0 e0       	ldi	r29, 0x00	; 0
		}
			lcd_goto(0,2);
			lcd_prints(" SYS  DIA  PULSE");
 260:	0f 2e       	mov	r0, r31
 262:	f5 e6       	ldi	r31, 0x65	; 101
 264:	ef 2e       	mov	r14, r31
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	ff 2e       	mov	r15, r31
 26a:	f0 2d       	mov	r31, r0
	lcd_init();
	
	while(1)
	{

		lcd_goto(1,1);
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_goto>
		for (a=1;a<=13;a++)
 274:	10 93 79 00 	sts	0x0079, r17
 278:	00 93 78 00 	sts	0x0078, r16
 27c:	c8 01       	movw	r24, r16
		{
			lcd_printc(x[a]);
 27e:	8c 0f       	add	r24, r28
 280:	9d 1f       	adc	r25, r29
 282:	fc 01       	movw	r30, r24
 284:	80 81       	ld	r24, Z
 286:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_printc>
	
	while(1)
	{

		lcd_goto(1,1);
		for (a=1;a<=13;a++)
 28a:	80 91 78 00 	lds	r24, 0x0078
 28e:	90 91 79 00 	lds	r25, 0x0079
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	90 93 79 00 	sts	0x0079, r25
 298:	80 93 78 00 	sts	0x0078, r24
 29c:	8e 30       	cpi	r24, 0x0E	; 14
 29e:	91 05       	cpc	r25, r1
 2a0:	74 f3       	brlt	.-36     	; 0x27e <main+0x32>
		{
			lcd_printc(x[a]);
		}
			lcd_goto(0,2);
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	62 e0       	ldi	r22, 0x02	; 2
 2a6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_goto>
			lcd_prints(" SYS  DIA  PULSE");
 2aa:	c7 01       	movw	r24, r14
 2ac:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_prints>
	}
 2b0:	dd cf       	rjmp	.-70     	; 0x26c <main+0x20>

000002b2 <ctrlz>:
}
void ctrlz()
{
	
	loop_until_bit_is_set(UCSRA,UDRE);
 2b2:	5d 9b       	sbis	0x0b, 5	; 11
 2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <ctrlz>
	UDR=26;
 2b6:	8a e1       	ldi	r24, 0x1A	; 26
 2b8:	8c b9       	out	0x0c, r24	; 12
 2ba:	08 95       	ret

000002bc <itoa>:
 2bc:	fb 01       	movw	r30, r22
 2be:	9f 01       	movw	r18, r30
 2c0:	e8 94       	clt
 2c2:	42 30       	cpi	r20, 0x02	; 2
 2c4:	c4 f0       	brlt	.+48     	; 0x2f6 <itoa+0x3a>
 2c6:	45 32       	cpi	r20, 0x25	; 37
 2c8:	b4 f4       	brge	.+44     	; 0x2f6 <itoa+0x3a>
 2ca:	4a 30       	cpi	r20, 0x0A	; 10
 2cc:	29 f4       	brne	.+10     	; 0x2d8 <itoa+0x1c>
 2ce:	97 fb       	bst	r25, 7
 2d0:	1e f4       	brtc	.+6      	; 0x2d8 <itoa+0x1c>
 2d2:	90 95       	com	r25
 2d4:	81 95       	neg	r24
 2d6:	9f 4f       	sbci	r25, 0xFF	; 255
 2d8:	64 2f       	mov	r22, r20
 2da:	77 27       	eor	r23, r23
 2dc:	0e 94 8f 01 	call	0x31e	; 0x31e <__udivmodhi4>
 2e0:	80 5d       	subi	r24, 0xD0	; 208
 2e2:	8a 33       	cpi	r24, 0x3A	; 58
 2e4:	0c f0       	brlt	.+2      	; 0x2e8 <itoa+0x2c>
 2e6:	89 5d       	subi	r24, 0xD9	; 217
 2e8:	81 93       	st	Z+, r24
 2ea:	cb 01       	movw	r24, r22
 2ec:	00 97       	sbiw	r24, 0x00	; 0
 2ee:	a1 f7       	brne	.-24     	; 0x2d8 <itoa+0x1c>
 2f0:	16 f4       	brtc	.+4      	; 0x2f6 <itoa+0x3a>
 2f2:	5d e2       	ldi	r21, 0x2D	; 45
 2f4:	51 93       	st	Z+, r21
 2f6:	10 82       	st	Z, r1
 2f8:	c9 01       	movw	r24, r18
 2fa:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <strrev>

000002fe <strrev>:
 2fe:	dc 01       	movw	r26, r24
 300:	fc 01       	movw	r30, r24
 302:	67 2f       	mov	r22, r23
 304:	71 91       	ld	r23, Z+
 306:	77 23       	and	r23, r23
 308:	e1 f7       	brne	.-8      	; 0x302 <strrev+0x4>
 30a:	32 97       	sbiw	r30, 0x02	; 2
 30c:	04 c0       	rjmp	.+8      	; 0x316 <strrev+0x18>
 30e:	7c 91       	ld	r23, X
 310:	6d 93       	st	X+, r22
 312:	70 83       	st	Z, r23
 314:	62 91       	ld	r22, -Z
 316:	ae 17       	cp	r26, r30
 318:	bf 07       	cpc	r27, r31
 31a:	c8 f3       	brcs	.-14     	; 0x30e <strrev+0x10>
 31c:	08 95       	ret

0000031e <__udivmodhi4>:
 31e:	aa 1b       	sub	r26, r26
 320:	bb 1b       	sub	r27, r27
 322:	51 e1       	ldi	r21, 0x11	; 17
 324:	07 c0       	rjmp	.+14     	; 0x334 <__udivmodhi4_ep>

00000326 <__udivmodhi4_loop>:
 326:	aa 1f       	adc	r26, r26
 328:	bb 1f       	adc	r27, r27
 32a:	a6 17       	cp	r26, r22
 32c:	b7 07       	cpc	r27, r23
 32e:	10 f0       	brcs	.+4      	; 0x334 <__udivmodhi4_ep>
 330:	a6 1b       	sub	r26, r22
 332:	b7 0b       	sbc	r27, r23

00000334 <__udivmodhi4_ep>:
 334:	88 1f       	adc	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	5a 95       	dec	r21
 33a:	a9 f7       	brne	.-22     	; 0x326 <__udivmodhi4_loop>
 33c:	80 95       	com	r24
 33e:	90 95       	com	r25
 340:	bc 01       	movw	r22, r24
 342:	cd 01       	movw	r24, r26
 344:	08 95       	ret

00000346 <_exit>:
 346:	f8 94       	cli

00000348 <__stop_program>:
 348:	ff cf       	rjmp	.-2      	; 0x348 <__stop_program>
