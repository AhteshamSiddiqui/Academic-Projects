
line_follower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000332  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000332  000003c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800066  00800066  000003cc  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000e70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000078f  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001f3  00000000  00000000  0000169f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000480  00000000  00000000  00001892  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00001d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001cf  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ec  00000000  00000000  00002037  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1a 01 	call	0x234	; 0x234 <main>
  8a:	0c 94 97 01 	jmp	0x32e	; 0x32e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <write_command>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	ef e3       	ldi	r30, 0x3F	; 63
  94:	ff e1       	ldi	r31, 0x1F	; 31
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <write_command+0x4>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <write_command+0xa>
  9c:	00 00       	nop

void write_command(unsigned char comm)
{
	
	_delay_ms(2);
	LCD_PORT=((comm & 0xF0)|(1<<en)); 	//Sending 4 MSB bits of command, & Enable=1,RW=0,RS=0;
  9e:	98 2f       	mov	r25, r24
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	92 60       	ori	r25, 0x02	; 2
  a4:	9b bb       	out	0x1b, r25	; 27
	cbi(LCD_PORT,en);
  a6:	d9 98       	cbi	0x1b, 1	; 27
	
	LCD_PORT=((comm<<4)|(1<<en)); 		//Sending 4 LSB bits of command
  a8:	82 95       	swap	r24
  aa:	80 7f       	andi	r24, 0xF0	; 240
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	8b bb       	out	0x1b, r24	; 27
	cbi(LCD_PORT,en);
  b0:	d9 98       	cbi	0x1b, 1	; 27
}
  b2:	08 95       	ret

000000b4 <lcd_init>:
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	95 ea       	ldi	r25, 0xA5	; 165
  b8:	ae e0       	ldi	r26, 0x0E	; 14
  ba:	81 50       	subi	r24, 0x01	; 1
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	a0 40       	sbci	r26, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <lcd_init+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_init+0x10>
  c4:	00 00       	nop
//LCD
void lcd_init(void)
{
	_delay_ms(300);
	
	LCD_DDR=0b11110011;					//Initialize the LCD port first
  c6:	83 ef       	ldi	r24, 0xF3	; 243
  c8:	8a bb       	out	0x1a, r24	; 26
	
	write_command(0x80);					//initial address of DDRAM for first line
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
	write_command(0x28);					//To select 4 bit data
  d0:	88 e2       	ldi	r24, 0x28	; 40
  d2:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
		
	write_command(0x0e);					//Command to on the display & cursor blink/blink off
  d6:	8e e0       	ldi	r24, 0x0E	; 14
  d8:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
	write_command(0x01);					//Command to clear LCD display
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
	
	write_command(0x06);					//Command for character entry mode
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
}
  e8:	08 95       	ret

000000ea <write_data>:
  ea:	ef e3       	ldi	r30, 0x3F	; 63
  ec:	ff e1       	ldi	r31, 0x1F	; 31
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <write_data+0x4>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <write_data+0xa>
  f4:	00 00       	nop

 void write_data(unsigned char lcd_data)
{
	_delay_ms(2);
	
	LCD_PORT=((lcd_data & 0xF0)|(1<<en)|(1<<rs)); 	//Sending 4 MSB bits of command, & Enable=1,RW=0,RS=1;
  f6:	98 2f       	mov	r25, r24
  f8:	90 7f       	andi	r25, 0xF0	; 240
  fa:	93 60       	ori	r25, 0x03	; 3
  fc:	9b bb       	out	0x1b, r25	; 27
	cbi(LCD_PORT,en);
  fe:	d9 98       	cbi	0x1b, 1	; 27
	
	LCD_PORT=((lcd_data<<4)|(1<<en)|(1<<rs)); 		//Sending 4 LSB bits of command
 100:	82 95       	swap	r24
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	83 60       	ori	r24, 0x03	; 3
 106:	8b bb       	out	0x1b, r24	; 27
	cbi(LCD_PORT,en);
 108:	d9 98       	cbi	0x1b, 1	; 27
}	
 10a:	08 95       	ret

0000010c <lcd_prints>:

void lcd_prints(char *print_str)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	ec 01       	movw	r28, r24
	while(*print_str)
 112:	88 81       	ld	r24, Y
 114:	88 23       	and	r24, r24
 116:	31 f0       	breq	.+12     	; 0x124 <lcd_prints+0x18>
	
	LCD_PORT=((lcd_data<<4)|(1<<en)|(1<<rs)); 		//Sending 4 LSB bits of command
	cbi(LCD_PORT,en);
}	

void lcd_prints(char *print_str)
 118:	21 96       	adiw	r28, 0x01	; 1
{
	while(*print_str)
	{
		if(*print_str=='\0')
		break;
		write_data(*print_str);
 11a:	0e 94 75 00 	call	0xea	; 0xea <write_data>
	cbi(LCD_PORT,en);
}	

void lcd_prints(char *print_str)
{
	while(*print_str)
 11e:	89 91       	ld	r24, Y+
 120:	88 23       	and	r24, r24
 122:	d9 f7       	brne	.-10     	; 0x11a <lcd_prints+0xe>
		if(*print_str=='\0')
		break;
		write_data(*print_str);
		print_str++;
	}
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <lcd_printi>:

void lcd_printi(int num)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	00 d0       	rcall	.+0      	; 0x130 <lcd_printi+0x6>
 130:	00 d0       	rcall	.+0      	; 0x132 <lcd_printi+0x8>
 132:	0f 92       	push	r0
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
	char buff[]={'0','0','0','0','0'};
 138:	de 01       	movw	r26, r28
 13a:	11 96       	adiw	r26, 0x01	; 1
 13c:	e0 e6       	ldi	r30, 0x60	; 96
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	25 e0       	ldi	r18, 0x05	; 5
 142:	01 90       	ld	r0, Z+
 144:	0d 92       	st	X+, r0
 146:	21 50       	subi	r18, 0x01	; 1
 148:	e1 f7       	brne	.-8      	; 0x142 <lcd_printi+0x18>
	itoa(num,buff,10);
 14a:	be 01       	movw	r22, r28
 14c:	6f 5f       	subi	r22, 0xFF	; 255
 14e:	7f 4f       	sbci	r23, 0xFF	; 255
 150:	4a e0       	ldi	r20, 0x0A	; 10
 152:	50 e0       	ldi	r21, 0x00	; 0
 154:	0e 94 52 01 	call	0x2a4	; 0x2a4 <itoa>
	lcd_prints(buff);
 158:	ce 01       	movw	r24, r28
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_prints>
}
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_goto>:
			lcd_goto(0,2);
		write_data(data);
}
void lcd_goto(uint8_t x,uint8_t y)
{
	if(y==1)
 170:	61 30       	cpi	r22, 0x01	; 1
 172:	21 f4       	brne	.+8      	; 0x17c <lcd_goto+0xc>
		write_command(0x80|x);
 174:	80 68       	ori	r24, 0x80	; 128
 176:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
 17a:	08 95       	ret
	else if(y==2)
 17c:	62 30       	cpi	r22, 0x02	; 2
 17e:	19 f4       	brne	.+6      	; 0x186 <lcd_goto+0x16>
		write_command(0xC0|x);
 180:	80 6c       	ori	r24, 0xC0	; 192
 182:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
 186:	08 95       	ret

00000188 <lcd_printc>:
	itoa(num,buff,10);
	lcd_prints(buff);
}

void lcd_printc(char data)
{
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24
		if(data=='\n')
 18c:	8a 30       	cpi	r24, 0x0A	; 10
 18e:	21 f4       	brne	.+8      	; 0x198 <lcd_printc+0x10>
			lcd_goto(0,2);
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_goto>
		write_data(data);
 198:	8c 2f       	mov	r24, r28
 19a:	0e 94 75 00 	call	0xea	; 0xea <write_data>
}
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <lcd_clrscr>:
		write_command(0xC0|x);
}

void lcd_clrscr(void)
{
	write_command(0x01);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
 1a8:	8f ed       	ldi	r24, 0xDF	; 223
 1aa:	9e e2       	ldi	r25, 0x2E	; 46
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_clrscr+0xa>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_clrscr+0x10>
 1b2:	00 00       	nop
	_delay_ms(3);
	write_command(0x80);
 1b4:	80 e8       	ldi	r24, 0x80	; 128
 1b6:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
}
 1ba:	08 95       	ret

000001bc <init_usart>:
//USART
void init_usart(char baud)
{
	//Communication protocol set
	//with 1 stop bit & 8 data bits
	UCSRC=(1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL);
 1bc:	96 e8       	ldi	r25, 0x86	; 134
 1be:	90 bd       	out	0x20, r25	; 32
	
	//Reception & transmission is enabled
	//Reception of data will occur on interrupt
	UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
 1c0:	98 e9       	ldi	r25, 0x98	; 152
 1c2:	9a b9       	out	0x0a, r25	; 10
	
	//Baud rate = 9600
	UBRRH=0x00;
 1c4:	10 bc       	out	0x20, r1	; 32
	UBRRL=baud;
 1c6:	89 b9       	out	0x09, r24	; 9
}
 1c8:	08 95       	ret

000001ca <transmit_char>:

void transmit_char(char data)
{
	loop_until_bit_is_set(UCSRA,UDRE);
 1ca:	5d 9b       	sbis	0x0b, 5	; 11
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <transmit_char>
	UDR=data;
 1ce:	8c b9       	out	0x0c, r24	; 12
}
 1d0:	08 95       	ret

000001d2 <transmit_string>:

void transmit_string(char *data)
{
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	ec 01       	movw	r28, r24
	while(*data)
 1d8:	88 81       	ld	r24, Y
 1da:	88 23       	and	r24, r24
 1dc:	31 f0       	breq	.+12     	; 0x1ea <transmit_string+0x18>
{
	loop_until_bit_is_set(UCSRA,UDRE);
	UDR=data;
}

void transmit_string(char *data)
 1de:	21 96       	adiw	r28, 0x01	; 1
{
	while(*data)
	{
		transmit_char(*data);
 1e0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <transmit_char>
	UDR=data;
}

void transmit_string(char *data)
{
	while(*data)
 1e4:	89 91       	ld	r24, Y+
 1e6:	88 23       	and	r24, r24
 1e8:	d9 f7       	brne	.-10     	; 0x1e0 <transmit_string+0xe>
	{
		transmit_char(*data);
		data++;
	}
		
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <USART_Receive>:

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) )
 1f0:	5f 9b       	sbis	0x0b, 7	; 11
 1f2:	fe cf       	rjmp	.-4      	; 0x1f0 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR;
 1f4:	8c b1       	in	r24, 0x0c	; 12
}
 1f6:	08 95       	ret

000001f8 <__vector_11>:
#include <avr/interrupt.h>
void line_follower();
char x;

SIGNAL(USART_RXC_vect)
{
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	8f 93       	push	r24
	x=UDR;
 204:	8c b1       	in	r24, 0x0c	; 12
 206:	80 93 66 00 	sts	0x0066, r24
}
 20a:	8f 91       	pop	r24
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <line_follower>:
    }
}

void line_follower()
{
	 if (bit_is_set(PIND,6))
 216:	86 9b       	sbis	0x10, 6	; 16
 218:	03 c0       	rjmp	.+6      	; 0x220 <line_follower+0xa>
	 {
		 PORTC=0b00000101;
 21a:	85 e0       	ldi	r24, 0x05	; 5
 21c:	85 bb       	out	0x15, r24	; 21
 21e:	08 95       	ret
	 }
	 else
	 {
		 if (bit_is_set(PIND,7))
 220:	87 9b       	sbis	0x10, 7	; 16
 222:	03 c0       	rjmp	.+6      	; 0x22a <line_follower+0x14>
		 {
			 PORTC=0b00001001;
 224:	89 e0       	ldi	r24, 0x09	; 9
 226:	85 bb       	out	0x15, r24	; 21
 228:	08 95       	ret
		 }
		 else
		 {
			 if (bit_is_set(PIND,5))
 22a:	85 9b       	sbis	0x10, 5	; 16
 22c:	02 c0       	rjmp	.+4      	; 0x232 <line_follower+0x1c>
			 {
				 PORTC=0b00000110;
 22e:	86 e0       	ldi	r24, 0x06	; 6
 230:	85 bb       	out	0x15, r24	; 21
 232:	08 95       	ret

00000234 <main>:
	x=UDR;
}

int main(void)
{
	init_usart(103);
 234:	87 e6       	ldi	r24, 0x67	; 103
 236:	0e 94 de 00 	call	0x1bc	; 0x1bc <init_usart>
	sei();
 23a:	78 94       	sei
	lcd_init();
 23c:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_init>
	DDRD=0x00;
 240:	11 ba       	out	0x11, r1	; 17
	PORTD=0xff;
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	82 bb       	out	0x12, r24	; 18
		DDRB=0x00;
 246:	17 ba       	out	0x17, r1	; 23
		PORTB=0xff;
 248:	88 bb       	out	0x18, r24	; 24
	DDRC=0xff;
 24a:	84 bb       	out	0x14, r24	; 20
	
    while(1)
    {

	{
		lcd_goto(1,1);
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_goto>
		lcd_printc(x);
 254:	80 91 66 00 	lds	r24, 0x0066
 258:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_printc>
	}	
/////////////////////////////////////////////////////////////
        if(bit_is_set(PINB,0))
 25c:	b0 9b       	sbis	0x16, 0	; 22
 25e:	08 c0       	rjmp	.+16     	; 0x270 <main+0x3c>
		{
			if(x=='4')   
 260:	80 91 66 00 	lds	r24, 0x0066
 264:	84 33       	cpi	r24, 0x34	; 52
 266:	11 f4       	brne	.+4      	; 0x26c <main+0x38>
			PORTC=0b00000000;
 268:	15 ba       	out	0x15, r1	; 21
 26a:	02 c0       	rjmp	.+4      	; 0x270 <main+0x3c>
			else
		    line_follower();
 26c:	0e 94 0b 01 	call	0x216	; 0x216 <line_follower>
		}
/////////////////////////////////////////////////////////////	
/////////////////////////////////////////////////////////////
if(bit_is_set(PINB,1))
 270:	b1 9b       	sbis	0x16, 1	; 22
 272:	08 c0       	rjmp	.+16     	; 0x284 <main+0x50>
{
	if(x=='5')
 274:	80 91 66 00 	lds	r24, 0x0066
 278:	85 33       	cpi	r24, 0x35	; 53
 27a:	11 f4       	brne	.+4      	; 0x280 <main+0x4c>
	PORTC=0b00000000;
 27c:	15 ba       	out	0x15, r1	; 21
 27e:	02 c0       	rjmp	.+4      	; 0x284 <main+0x50>
	else
	line_follower();
 280:	0e 94 0b 01 	call	0x216	; 0x216 <line_follower>
}
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
if(bit_is_set(PINB,2))
 284:	b2 9b       	sbis	0x16, 2	; 22
 286:	e2 cf       	rjmp	.-60     	; 0x24c <main+0x18>
{
	if(x=='8')
 288:	80 91 66 00 	lds	r24, 0x0066
 28c:	88 33       	cpi	r24, 0x38	; 56
 28e:	11 f4       	brne	.+4      	; 0x294 <main+0x60>
	PORTC=0b00000000;
 290:	15 ba       	out	0x15, r1	; 21
 292:	dc cf       	rjmp	.-72     	; 0x24c <main+0x18>
	else
	line_follower();
 294:	0e 94 0b 01 	call	0x216	; 0x216 <line_follower>
 298:	d9 cf       	rjmp	.-78     	; 0x24c <main+0x18>

0000029a <ctrlz>:
}

void ctrlz()
{
	
	loop_until_bit_is_set(UCSRA,UDRE);
 29a:	5d 9b       	sbis	0x0b, 5	; 11
 29c:	fe cf       	rjmp	.-4      	; 0x29a <ctrlz>
	UDR=26;
 29e:	8a e1       	ldi	r24, 0x1A	; 26
 2a0:	8c b9       	out	0x0c, r24	; 12
}
 2a2:	08 95       	ret

000002a4 <itoa>:
 2a4:	fb 01       	movw	r30, r22
 2a6:	9f 01       	movw	r18, r30
 2a8:	e8 94       	clt
 2aa:	42 30       	cpi	r20, 0x02	; 2
 2ac:	c4 f0       	brlt	.+48     	; 0x2de <itoa+0x3a>
 2ae:	45 32       	cpi	r20, 0x25	; 37
 2b0:	b4 f4       	brge	.+44     	; 0x2de <itoa+0x3a>
 2b2:	4a 30       	cpi	r20, 0x0A	; 10
 2b4:	29 f4       	brne	.+10     	; 0x2c0 <itoa+0x1c>
 2b6:	97 fb       	bst	r25, 7
 2b8:	1e f4       	brtc	.+6      	; 0x2c0 <itoa+0x1c>
 2ba:	90 95       	com	r25
 2bc:	81 95       	neg	r24
 2be:	9f 4f       	sbci	r25, 0xFF	; 255
 2c0:	64 2f       	mov	r22, r20
 2c2:	77 27       	eor	r23, r23
 2c4:	0e 94 83 01 	call	0x306	; 0x306 <__udivmodhi4>
 2c8:	80 5d       	subi	r24, 0xD0	; 208
 2ca:	8a 33       	cpi	r24, 0x3A	; 58
 2cc:	0c f0       	brlt	.+2      	; 0x2d0 <itoa+0x2c>
 2ce:	89 5d       	subi	r24, 0xD9	; 217
 2d0:	81 93       	st	Z+, r24
 2d2:	cb 01       	movw	r24, r22
 2d4:	00 97       	sbiw	r24, 0x00	; 0
 2d6:	a1 f7       	brne	.-24     	; 0x2c0 <itoa+0x1c>
 2d8:	16 f4       	brtc	.+4      	; 0x2de <itoa+0x3a>
 2da:	5d e2       	ldi	r21, 0x2D	; 45
 2dc:	51 93       	st	Z+, r21
 2de:	10 82       	st	Z, r1
 2e0:	c9 01       	movw	r24, r18
 2e2:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <strrev>

000002e6 <strrev>:
 2e6:	dc 01       	movw	r26, r24
 2e8:	fc 01       	movw	r30, r24
 2ea:	67 2f       	mov	r22, r23
 2ec:	71 91       	ld	r23, Z+
 2ee:	77 23       	and	r23, r23
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <strrev+0x4>
 2f2:	32 97       	sbiw	r30, 0x02	; 2
 2f4:	04 c0       	rjmp	.+8      	; 0x2fe <strrev+0x18>
 2f6:	7c 91       	ld	r23, X
 2f8:	6d 93       	st	X+, r22
 2fa:	70 83       	st	Z, r23
 2fc:	62 91       	ld	r22, -Z
 2fe:	ae 17       	cp	r26, r30
 300:	bf 07       	cpc	r27, r31
 302:	c8 f3       	brcs	.-14     	; 0x2f6 <strrev+0x10>
 304:	08 95       	ret

00000306 <__udivmodhi4>:
 306:	aa 1b       	sub	r26, r26
 308:	bb 1b       	sub	r27, r27
 30a:	51 e1       	ldi	r21, 0x11	; 17
 30c:	07 c0       	rjmp	.+14     	; 0x31c <__udivmodhi4_ep>

0000030e <__udivmodhi4_loop>:
 30e:	aa 1f       	adc	r26, r26
 310:	bb 1f       	adc	r27, r27
 312:	a6 17       	cp	r26, r22
 314:	b7 07       	cpc	r27, r23
 316:	10 f0       	brcs	.+4      	; 0x31c <__udivmodhi4_ep>
 318:	a6 1b       	sub	r26, r22
 31a:	b7 0b       	sbc	r27, r23

0000031c <__udivmodhi4_ep>:
 31c:	88 1f       	adc	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	5a 95       	dec	r21
 322:	a9 f7       	brne	.-22     	; 0x30e <__udivmodhi4_loop>
 324:	80 95       	com	r24
 326:	90 95       	com	r25
 328:	bc 01       	movw	r22, r24
 32a:	cd 01       	movw	r24, r26
 32c:	08 95       	ret

0000032e <_exit>:
 32e:	f8 94       	cli

00000330 <__stop_program>:
 330:	ff cf       	rjmp	.-2      	; 0x330 <__stop_program>
