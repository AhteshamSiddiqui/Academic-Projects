
vaibhavi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000037c  00000410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800074  00800074  00000424  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000078d  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001f1  00000000  00000000  000016f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000457  00000000  00000000  000018e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000188  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000159  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 07 01 	call	0x20e	; 0x20e <main>
  8a:	0c 94 bc 01 	jmp	0x378	; 0x378 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <write_command>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	ef e3       	ldi	r30, 0x3F	; 63
  94:	ff e1       	ldi	r31, 0x1F	; 31
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <write_command+0x4>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <write_command+0xa>
  9c:	00 00       	nop

void write_command(unsigned char comm)
{
	
	_delay_ms(2);
	LCD_PORT=((comm & 0xF0)|(1<<en)); 	//Sending 4 MSB bits of command, & Enable=1,RW=0,RS=0;
  9e:	98 2f       	mov	r25, r24
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	92 60       	ori	r25, 0x02	; 2
  a4:	9b bb       	out	0x1b, r25	; 27
	cbi(LCD_PORT,en);
  a6:	d9 98       	cbi	0x1b, 1	; 27
	
	LCD_PORT=((comm<<4)|(1<<en)); 		//Sending 4 LSB bits of command
  a8:	82 95       	swap	r24
  aa:	80 7f       	andi	r24, 0xF0	; 240
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	8b bb       	out	0x1b, r24	; 27
	cbi(LCD_PORT,en);
  b0:	d9 98       	cbi	0x1b, 1	; 27
}
  b2:	08 95       	ret

000000b4 <lcd_init>:
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	95 ea       	ldi	r25, 0xA5	; 165
  b8:	ae e0       	ldi	r26, 0x0E	; 14
  ba:	81 50       	subi	r24, 0x01	; 1
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	a0 40       	sbci	r26, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <lcd_init+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_init+0x10>
  c4:	00 00       	nop
//LCD
void lcd_init(void)
{
	_delay_ms(300);
	
	LCD_DDR=0b11110011;					//Initialize the LCD port first
  c6:	83 ef       	ldi	r24, 0xF3	; 243
  c8:	8a bb       	out	0x1a, r24	; 26
	
	write_command(0x80);					//initial address of DDRAM for first line
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
	write_command(0x28);					//To select 4 bit data
  d0:	88 e2       	ldi	r24, 0x28	; 40
  d2:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
		
	write_command(0x0e);					//Command to on the display & cursor blink/blink off
  d6:	8e e0       	ldi	r24, 0x0E	; 14
  d8:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
	write_command(0x01);					//Command to clear LCD display
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
	
	write_command(0x06);					//Command for character entry mode
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
}
  e8:	08 95       	ret

000000ea <write_data>:
  ea:	ef e3       	ldi	r30, 0x3F	; 63
  ec:	ff e1       	ldi	r31, 0x1F	; 31
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <write_data+0x4>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <write_data+0xa>
  f4:	00 00       	nop

 void write_data(unsigned char lcd_data)
{
	_delay_ms(2);
	
	LCD_PORT=((lcd_data & 0xF0)|(1<<en)|(1<<rs)); 	//Sending 4 MSB bits of command, & Enable=1,RW=0,RS=1;
  f6:	98 2f       	mov	r25, r24
  f8:	90 7f       	andi	r25, 0xF0	; 240
  fa:	93 60       	ori	r25, 0x03	; 3
  fc:	9b bb       	out	0x1b, r25	; 27
	cbi(LCD_PORT,en);
  fe:	d9 98       	cbi	0x1b, 1	; 27
	
	LCD_PORT=((lcd_data<<4)|(1<<en)|(1<<rs)); 		//Sending 4 LSB bits of command
 100:	82 95       	swap	r24
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	83 60       	ori	r24, 0x03	; 3
 106:	8b bb       	out	0x1b, r24	; 27
	cbi(LCD_PORT,en);
 108:	d9 98       	cbi	0x1b, 1	; 27
}	
 10a:	08 95       	ret

0000010c <lcd_prints>:

void lcd_prints(char *print_str)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	ec 01       	movw	r28, r24
	while(*print_str)
 112:	88 81       	ld	r24, Y
 114:	88 23       	and	r24, r24
 116:	31 f0       	breq	.+12     	; 0x124 <lcd_prints+0x18>
	
	LCD_PORT=((lcd_data<<4)|(1<<en)|(1<<rs)); 		//Sending 4 LSB bits of command
	cbi(LCD_PORT,en);
}	

void lcd_prints(char *print_str)
 118:	21 96       	adiw	r28, 0x01	; 1
{
	while(*print_str)
	{
		if(*print_str=='\0')
		break;
		write_data(*print_str);
 11a:	0e 94 75 00 	call	0xea	; 0xea <write_data>
	cbi(LCD_PORT,en);
}	

void lcd_prints(char *print_str)
{
	while(*print_str)
 11e:	89 91       	ld	r24, Y+
 120:	88 23       	and	r24, r24
 122:	d9 f7       	brne	.-10     	; 0x11a <lcd_prints+0xe>
		if(*print_str=='\0')
		break;
		write_data(*print_str);
		print_str++;
	}
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <lcd_printi>:

void lcd_printi(int num)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	00 d0       	rcall	.+0      	; 0x130 <lcd_printi+0x6>
 130:	00 d0       	rcall	.+0      	; 0x132 <lcd_printi+0x8>
 132:	0f 92       	push	r0
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
	char buff[]={'0','0','0','0','0'};
 138:	de 01       	movw	r26, r28
 13a:	11 96       	adiw	r26, 0x01	; 1
 13c:	e0 e6       	ldi	r30, 0x60	; 96
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	25 e0       	ldi	r18, 0x05	; 5
 142:	01 90       	ld	r0, Z+
 144:	0d 92       	st	X+, r0
 146:	21 50       	subi	r18, 0x01	; 1
 148:	e1 f7       	brne	.-8      	; 0x142 <lcd_printi+0x18>
	itoa(num,buff,10);
 14a:	be 01       	movw	r22, r28
 14c:	6f 5f       	subi	r22, 0xFF	; 255
 14e:	7f 4f       	sbci	r23, 0xFF	; 255
 150:	4a e0       	ldi	r20, 0x0A	; 10
 152:	50 e0       	ldi	r21, 0x00	; 0
 154:	0e 94 77 01 	call	0x2ee	; 0x2ee <itoa>
	lcd_prints(buff);
 158:	ce 01       	movw	r24, r28
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_prints>
}
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_goto>:
			lcd_goto(0,2);
		write_data(data);
}
void lcd_goto(uint8_t x,uint8_t y)
{
	if(y==1)
 170:	61 30       	cpi	r22, 0x01	; 1
 172:	21 f4       	brne	.+8      	; 0x17c <lcd_goto+0xc>
		write_command(0x80|x);
 174:	80 68       	ori	r24, 0x80	; 128
 176:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
 17a:	08 95       	ret
	else if(y==2)
 17c:	62 30       	cpi	r22, 0x02	; 2
 17e:	19 f4       	brne	.+6      	; 0x186 <lcd_goto+0x16>
		write_command(0xC0|x);
 180:	80 6c       	ori	r24, 0xC0	; 192
 182:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
 186:	08 95       	ret

00000188 <lcd_printc>:
	itoa(num,buff,10);
	lcd_prints(buff);
}

void lcd_printc(char data)
{
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24
		if(data=='\n')
 18c:	8a 30       	cpi	r24, 0x0A	; 10
 18e:	21 f4       	brne	.+8      	; 0x198 <lcd_printc+0x10>
			lcd_goto(0,2);
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_goto>
		write_data(data);
 198:	8c 2f       	mov	r24, r28
 19a:	0e 94 75 00 	call	0xea	; 0xea <write_data>
}
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <lcd_clrscr>:
		write_command(0xC0|x);
}

void lcd_clrscr(void)
{
	write_command(0x01);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
 1a8:	8f ed       	ldi	r24, 0xDF	; 223
 1aa:	9e e2       	ldi	r25, 0x2E	; 46
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_clrscr+0xa>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_clrscr+0x10>
 1b2:	00 00       	nop
	_delay_ms(3);
	write_command(0x80);
 1b4:	80 e8       	ldi	r24, 0x80	; 128
 1b6:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
}
 1ba:	08 95       	ret

000001bc <timer>:
			}
    }
}
void timer()
{
	x=0;
 1bc:	10 92 79 00 	sts	0x0079, r1
 1c0:	10 92 78 00 	sts	0x0078, r1
	s++;
 1c4:	80 91 76 00 	lds	r24, 0x0076
 1c8:	90 91 77 00 	lds	r25, 0x0077
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	90 93 77 00 	sts	0x0077, r25
 1d2:	80 93 76 00 	sts	0x0076, r24
	if (s>150)
 1d6:	87 39       	cpi	r24, 0x97	; 151
 1d8:	91 05       	cpc	r25, r1
 1da:	6c f0       	brlt	.+26     	; 0x1f6 <timer+0x3a>
	{
		s=0;
 1dc:	10 92 77 00 	sts	0x0077, r1
 1e0:	10 92 76 00 	sts	0x0076, r1
		m++;
 1e4:	80 91 74 00 	lds	r24, 0x0074
 1e8:	90 91 75 00 	lds	r25, 0x0075
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	90 93 75 00 	sts	0x0075, r25
 1f2:	80 93 74 00 	sts	0x0074, r24
	}

	if (m>2)
 1f6:	80 91 74 00 	lds	r24, 0x0074
 1fa:	90 91 75 00 	lds	r25, 0x0075
 1fe:	83 30       	cpi	r24, 0x03	; 3
 200:	91 05       	cpc	r25, r1
 202:	24 f0       	brlt	.+8      	; 0x20c <timer+0x50>
	{
		m=0;
 204:	10 92 75 00 	sts	0x0075, r1
 208:	10 92 74 00 	sts	0x0074, r1
 20c:	08 95       	ret

0000020e <main>:
int j,h,speed;
void timer();
int x=0,s=0,h=0,m=0,check_a=1;
int main(void)
{
	lcd_init();
 20e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_init>
	DDRD=0x00;
 212:	11 ba       	out	0x11, r1	; 17
	PORTD=0xFF;
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	82 bb       	out	0x12, r24	; 18

		lcd_clrscr();	
 218:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_clrscr>
		 j=j+1;

		check_a=0;   
	   }
	   if(bit_is_clear(PIND,0) && check_a==0)
	   check_a=1;
 21c:	c1 e0       	ldi	r28, 0x01	; 1
 21e:	d0 e0       	ldi	r29, 0x00	; 0
		if(m==2)
			{
				speed=j;	
				lcd_clrscr();	
				lcd_goto(0,1);
				lcd_prints("Speed=");
 220:	05 e6       	ldi	r16, 0x65	; 101
 222:	10 e0       	ldi	r17, 0x00	; 0
				lcd_printi(speed);
				lcd_prints("km/hr");
 224:	0f 2e       	mov	r0, r31
 226:	fc e6       	ldi	r31, 0x6C	; 108
 228:	ef 2e       	mov	r14, r31
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	ff 2e       	mov	r15, r31
 22e:	f0 2d       	mov	r31, r0
	

    while(1)
    {
		{
			x++;
 230:	80 91 78 00 	lds	r24, 0x0078
 234:	90 91 79 00 	lds	r25, 0x0079
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	90 93 79 00 	sts	0x0079, r25
 23e:	80 93 78 00 	sts	0x0078, r24
			if (x==1600)
 242:	26 e0       	ldi	r18, 0x06	; 6
 244:	80 34       	cpi	r24, 0x40	; 64
 246:	92 07       	cpc	r25, r18
 248:	11 f4       	brne	.+4      	; 0x24e <main+0x40>
			{
				timer();
 24a:	0e 94 de 00 	call	0x1bc	; 0x1bc <timer>
			}
		}
 //////////////////////////////////////////////////////////////////     
	  {
		   if(bit_is_set(PIND,0) && check_a==1)
 24e:	80 9b       	sbis	0x10, 0	; 16
 250:	14 c0       	rjmp	.+40     	; 0x27a <main+0x6c>
 252:	80 91 72 00 	lds	r24, 0x0072
 256:	90 91 73 00 	lds	r25, 0x0073
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	91 05       	cpc	r25, r1
 25e:	69 f4       	brne	.+26     	; 0x27a <main+0x6c>
	   {
		 j=j+1;
 260:	80 91 7c 00 	lds	r24, 0x007C
 264:	90 91 7d 00 	lds	r25, 0x007D
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	90 93 7d 00 	sts	0x007D, r25
 26e:	80 93 7c 00 	sts	0x007C, r24

		check_a=0;   
 272:	10 92 73 00 	sts	0x0073, r1
 276:	10 92 72 00 	sts	0x0072, r1
	   }
	   if(bit_is_clear(PIND,0) && check_a==0)
 27a:	80 99       	sbic	0x10, 0	; 16
 27c:	0a c0       	rjmp	.+20     	; 0x292 <main+0x84>
 27e:	80 91 72 00 	lds	r24, 0x0072
 282:	90 91 73 00 	lds	r25, 0x0073
 286:	00 97       	sbiw	r24, 0x00	; 0
 288:	21 f4       	brne	.+8      	; 0x292 <main+0x84>
	   check_a=1;
 28a:	d0 93 73 00 	sts	0x0073, r29
 28e:	c0 93 72 00 	sts	0x0072, r28
	  }	 
		if(m==2)
 292:	80 91 74 00 	lds	r24, 0x0074
 296:	90 91 75 00 	lds	r25, 0x0075
 29a:	82 30       	cpi	r24, 0x02	; 2
 29c:	91 05       	cpc	r25, r1
 29e:	41 f6       	brne	.-112    	; 0x230 <main+0x22>
			{
				speed=j;	
 2a0:	80 91 7c 00 	lds	r24, 0x007C
 2a4:	90 91 7d 00 	lds	r25, 0x007D
 2a8:	90 93 7f 00 	sts	0x007F, r25
 2ac:	80 93 7e 00 	sts	0x007E, r24
				lcd_clrscr();	
 2b0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_clrscr>
				lcd_goto(0,1);
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_goto>
				lcd_prints("Speed=");
 2bc:	c8 01       	movw	r24, r16
 2be:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_prints>
				lcd_printi(speed);
 2c2:	80 91 7e 00 	lds	r24, 0x007E
 2c6:	90 91 7f 00 	lds	r25, 0x007F
 2ca:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_printi>
				lcd_prints("km/hr");
 2ce:	c7 01       	movw	r24, r14
 2d0:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_prints>
				j=0;
 2d4:	10 92 7d 00 	sts	0x007D, r1
 2d8:	10 92 7c 00 	sts	0x007C, r1
				m=0;
 2dc:	10 92 75 00 	sts	0x0075, r1
 2e0:	10 92 74 00 	sts	0x0074, r1
				check_a=1;
 2e4:	d0 93 73 00 	sts	0x0073, r29
 2e8:	c0 93 72 00 	sts	0x0072, r28
 2ec:	a1 cf       	rjmp	.-190    	; 0x230 <main+0x22>

000002ee <itoa>:
 2ee:	fb 01       	movw	r30, r22
 2f0:	9f 01       	movw	r18, r30
 2f2:	e8 94       	clt
 2f4:	42 30       	cpi	r20, 0x02	; 2
 2f6:	c4 f0       	brlt	.+48     	; 0x328 <itoa+0x3a>
 2f8:	45 32       	cpi	r20, 0x25	; 37
 2fa:	b4 f4       	brge	.+44     	; 0x328 <itoa+0x3a>
 2fc:	4a 30       	cpi	r20, 0x0A	; 10
 2fe:	29 f4       	brne	.+10     	; 0x30a <itoa+0x1c>
 300:	97 fb       	bst	r25, 7
 302:	1e f4       	brtc	.+6      	; 0x30a <itoa+0x1c>
 304:	90 95       	com	r25
 306:	81 95       	neg	r24
 308:	9f 4f       	sbci	r25, 0xFF	; 255
 30a:	64 2f       	mov	r22, r20
 30c:	77 27       	eor	r23, r23
 30e:	0e 94 a8 01 	call	0x350	; 0x350 <__udivmodhi4>
 312:	80 5d       	subi	r24, 0xD0	; 208
 314:	8a 33       	cpi	r24, 0x3A	; 58
 316:	0c f0       	brlt	.+2      	; 0x31a <itoa+0x2c>
 318:	89 5d       	subi	r24, 0xD9	; 217
 31a:	81 93       	st	Z+, r24
 31c:	cb 01       	movw	r24, r22
 31e:	00 97       	sbiw	r24, 0x00	; 0
 320:	a1 f7       	brne	.-24     	; 0x30a <itoa+0x1c>
 322:	16 f4       	brtc	.+4      	; 0x328 <itoa+0x3a>
 324:	5d e2       	ldi	r21, 0x2D	; 45
 326:	51 93       	st	Z+, r21
 328:	10 82       	st	Z, r1
 32a:	c9 01       	movw	r24, r18
 32c:	0c 94 98 01 	jmp	0x330	; 0x330 <strrev>

00000330 <strrev>:
 330:	dc 01       	movw	r26, r24
 332:	fc 01       	movw	r30, r24
 334:	67 2f       	mov	r22, r23
 336:	71 91       	ld	r23, Z+
 338:	77 23       	and	r23, r23
 33a:	e1 f7       	brne	.-8      	; 0x334 <strrev+0x4>
 33c:	32 97       	sbiw	r30, 0x02	; 2
 33e:	04 c0       	rjmp	.+8      	; 0x348 <strrev+0x18>
 340:	7c 91       	ld	r23, X
 342:	6d 93       	st	X+, r22
 344:	70 83       	st	Z, r23
 346:	62 91       	ld	r22, -Z
 348:	ae 17       	cp	r26, r30
 34a:	bf 07       	cpc	r27, r31
 34c:	c8 f3       	brcs	.-14     	; 0x340 <strrev+0x10>
 34e:	08 95       	ret

00000350 <__udivmodhi4>:
 350:	aa 1b       	sub	r26, r26
 352:	bb 1b       	sub	r27, r27
 354:	51 e1       	ldi	r21, 0x11	; 17
 356:	07 c0       	rjmp	.+14     	; 0x366 <__udivmodhi4_ep>

00000358 <__udivmodhi4_loop>:
 358:	aa 1f       	adc	r26, r26
 35a:	bb 1f       	adc	r27, r27
 35c:	a6 17       	cp	r26, r22
 35e:	b7 07       	cpc	r27, r23
 360:	10 f0       	brcs	.+4      	; 0x366 <__udivmodhi4_ep>
 362:	a6 1b       	sub	r26, r22
 364:	b7 0b       	sbc	r27, r23

00000366 <__udivmodhi4_ep>:
 366:	88 1f       	adc	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	5a 95       	dec	r21
 36c:	a9 f7       	brne	.-22     	; 0x358 <__udivmodhi4_loop>
 36e:	80 95       	com	r24
 370:	90 95       	com	r25
 372:	bc 01       	movw	r22, r24
 374:	cd 01       	movw	r24, r26
 376:	08 95       	ret

00000378 <_exit>:
 378:	f8 94       	cli

0000037a <__stop_program>:
 37a:	ff cf       	rjmp	.-2      	; 0x37a <__stop_program>
