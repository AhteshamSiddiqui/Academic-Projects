
Accelerometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000003a0  00000414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000954  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000014d  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f0  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001fa  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c1  00000000  00000000  00001a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00001f14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018d  00000000  00000000  00001ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003fc  00000000  00000000  00002189  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
  8a:	0c 94 ce 01 	jmp	0x39c	; 0x39c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <write_command>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	ef e3       	ldi	r30, 0x3F	; 63
  94:	ff e1       	ldi	r31, 0x1F	; 31
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <write_command+0x4>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <write_command+0xa>
  9c:	00 00       	nop

void write_command(unsigned char comm)
{
	
	_delay_ms(2);
	LCD_PORT=((comm & 0xF0)|(1<<en)); 	//Sending 4 MSB bits of command, & Enable=1,RW=0,RS=0;
  9e:	98 2f       	mov	r25, r24
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	92 60       	ori	r25, 0x02	; 2
  a4:	9b bb       	out	0x1b, r25	; 27
	cbi(LCD_PORT,en);
  a6:	d9 98       	cbi	0x1b, 1	; 27
	
	LCD_PORT=((comm<<4)|(1<<en)); 		//Sending 4 LSB bits of command
  a8:	82 95       	swap	r24
  aa:	80 7f       	andi	r24, 0xF0	; 240
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	8b bb       	out	0x1b, r24	; 27
	cbi(LCD_PORT,en);
  b0:	d9 98       	cbi	0x1b, 1	; 27
}
  b2:	08 95       	ret

000000b4 <lcd_init>:
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	95 ea       	ldi	r25, 0xA5	; 165
  b8:	ae e0       	ldi	r26, 0x0E	; 14
  ba:	81 50       	subi	r24, 0x01	; 1
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	a0 40       	sbci	r26, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <lcd_init+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_init+0x10>
  c4:	00 00       	nop
//LCD
void lcd_init(void)
{
	_delay_ms(300);
	
	LCD_DDR=0b11110011;					//Initialize the LCD port first
  c6:	83 ef       	ldi	r24, 0xF3	; 243
  c8:	8a bb       	out	0x1a, r24	; 26
	
	write_command(0x80);					//initial address of DDRAM for first line
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
	write_command(0x28);					//To select 4 bit data
  d0:	88 e2       	ldi	r24, 0x28	; 40
  d2:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
		
	write_command(0x0e);					//Command to on the display & cursor blink/blink off
  d6:	8e e0       	ldi	r24, 0x0E	; 14
  d8:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
	write_command(0x01);					//Command to clear LCD display
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
	
	write_command(0x06);					//Command for character entry mode
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
}
  e8:	08 95       	ret

000000ea <write_data>:
  ea:	ef e3       	ldi	r30, 0x3F	; 63
  ec:	ff e1       	ldi	r31, 0x1F	; 31
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <write_data+0x4>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <write_data+0xa>
  f4:	00 00       	nop

 void write_data(unsigned char lcd_data)
{
	_delay_ms(2);
	
	LCD_PORT=((lcd_data & 0xF0)|(1<<en)|(1<<rs)); 	//Sending 4 MSB bits of command, & Enable=1,RW=0,RS=1;
  f6:	98 2f       	mov	r25, r24
  f8:	90 7f       	andi	r25, 0xF0	; 240
  fa:	93 60       	ori	r25, 0x03	; 3
  fc:	9b bb       	out	0x1b, r25	; 27
	cbi(LCD_PORT,en);
  fe:	d9 98       	cbi	0x1b, 1	; 27
	
	LCD_PORT=((lcd_data<<4)|(1<<en)|(1<<rs)); 		//Sending 4 LSB bits of command
 100:	82 95       	swap	r24
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	83 60       	ori	r24, 0x03	; 3
 106:	8b bb       	out	0x1b, r24	; 27
	cbi(LCD_PORT,en);
 108:	d9 98       	cbi	0x1b, 1	; 27
}	
 10a:	08 95       	ret

0000010c <lcd_prints>:

void lcd_prints(char *print_str)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	ec 01       	movw	r28, r24
	while(*print_str)
 112:	88 81       	ld	r24, Y
 114:	88 23       	and	r24, r24
 116:	31 f0       	breq	.+12     	; 0x124 <lcd_prints+0x18>
	
	LCD_PORT=((lcd_data<<4)|(1<<en)|(1<<rs)); 		//Sending 4 LSB bits of command
	cbi(LCD_PORT,en);
}	

void lcd_prints(char *print_str)
 118:	21 96       	adiw	r28, 0x01	; 1
{
	while(*print_str)
	{
		if(*print_str=='\0')
		break;
		write_data(*print_str);
 11a:	0e 94 75 00 	call	0xea	; 0xea <write_data>
	cbi(LCD_PORT,en);
}	

void lcd_prints(char *print_str)
{
	while(*print_str)
 11e:	89 91       	ld	r24, Y+
 120:	88 23       	and	r24, r24
 122:	d9 f7       	brne	.-10     	; 0x11a <lcd_prints+0xe>
		if(*print_str=='\0')
		break;
		write_data(*print_str);
		print_str++;
	}
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <lcd_printi>:

void lcd_printi(int num)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	00 d0       	rcall	.+0      	; 0x130 <lcd_printi+0x6>
 130:	00 d0       	rcall	.+0      	; 0x132 <lcd_printi+0x8>
 132:	0f 92       	push	r0
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
	char buff[]={'0','0','0','0','0'};
 138:	de 01       	movw	r26, r28
 13a:	11 96       	adiw	r26, 0x01	; 1
 13c:	e0 e6       	ldi	r30, 0x60	; 96
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	25 e0       	ldi	r18, 0x05	; 5
 142:	01 90       	ld	r0, Z+
 144:	0d 92       	st	X+, r0
 146:	21 50       	subi	r18, 0x01	; 1
 148:	e1 f7       	brne	.-8      	; 0x142 <lcd_printi+0x18>
	itoa(num,buff,10);
 14a:	be 01       	movw	r22, r28
 14c:	6f 5f       	subi	r22, 0xFF	; 255
 14e:	7f 4f       	sbci	r23, 0xFF	; 255
 150:	4a e0       	ldi	r20, 0x0A	; 10
 152:	50 e0       	ldi	r21, 0x00	; 0
 154:	0e 94 89 01 	call	0x312	; 0x312 <itoa>
	lcd_prints(buff);
 158:	ce 01       	movw	r24, r28
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_prints>
}
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_goto>:
			lcd_goto(0,2);
		write_data(data);
}
void lcd_goto(uint8_t x,uint8_t y)
{
	if(y==1)
 170:	61 30       	cpi	r22, 0x01	; 1
 172:	21 f4       	brne	.+8      	; 0x17c <lcd_goto+0xc>
		write_command(0x80|x);
 174:	80 68       	ori	r24, 0x80	; 128
 176:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
 17a:	08 95       	ret
	else if(y==2)
 17c:	62 30       	cpi	r22, 0x02	; 2
 17e:	19 f4       	brne	.+6      	; 0x186 <lcd_goto+0x16>
		write_command(0xC0|x);
 180:	80 6c       	ori	r24, 0xC0	; 192
 182:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
 186:	08 95       	ret

00000188 <lcd_printc>:
	itoa(num,buff,10);
	lcd_prints(buff);
}

void lcd_printc(char data)
{
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24
		if(data=='\n')
 18c:	8a 30       	cpi	r24, 0x0A	; 10
 18e:	21 f4       	brne	.+8      	; 0x198 <lcd_printc+0x10>
			lcd_goto(0,2);
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_goto>
		write_data(data);
 198:	8c 2f       	mov	r24, r28
 19a:	0e 94 75 00 	call	0xea	; 0xea <write_data>
}
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <lcd_clrscr>:
		write_command(0xC0|x);
}

void lcd_clrscr(void)
{
	write_command(0x01);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
 1a8:	8f ed       	ldi	r24, 0xDF	; 223
 1aa:	9e e2       	ldi	r25, 0x2E	; 46
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_clrscr+0xa>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_clrscr+0x10>
 1b2:	00 00       	nop
	_delay_ms(3);
	write_command(0x80);
 1b4:	80 e8       	ldi	r24, 0x80	; 128
 1b6:	0e 94 49 00 	call	0x92	; 0x92 <write_command>
}
 1ba:	08 95       	ret

000001bc <init_adc>:
void init_adc(void);
int read_adc(char adc);

void init_adc(void)
{
	ADMUX=(1<<REFS0);
 1bc:	80 e4       	ldi	r24, 0x40	; 64
 1be:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(1<<ADEN);
 1c0:	87 e8       	ldi	r24, 0x87	; 135
 1c2:	86 b9       	out	0x06, r24	; 6
}
 1c4:	08 95       	ret

000001c6 <read_adc>:

int read_adc(char adc)
{
	ADMUX&=(0b11100000);
 1c6:	97 b1       	in	r25, 0x07	; 7
 1c8:	90 7e       	andi	r25, 0xE0	; 224
 1ca:	97 b9       	out	0x07, r25	; 7
	ADMUX|=(adc);
 1cc:	97 b1       	in	r25, 0x07	; 7
 1ce:	89 2b       	or	r24, r25
 1d0:	87 b9       	out	0x07, r24	; 7
	//`ADMUX=0b01
	
	ADCSRA|=(1<<ADEN)|(1<<ADSC);
 1d2:	86 b1       	in	r24, 0x06	; 6
 1d4:	80 6c       	ori	r24, 0xC0	; 192
 1d6:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<ADIF))==0);
 1d8:	34 9b       	sbis	0x06, 4	; 6
 1da:	fe cf       	rjmp	.-4      	; 0x1d8 <read_adc+0x12>
	return ADC;
 1dc:	84 b1       	in	r24, 0x04	; 4
 1de:	95 b1       	in	r25, 0x05	; 5
}
 1e0:	08 95       	ret

000001e2 <main>:
#include "lcd.h"
#include "adc.h"
int main(void)
{
	
	init_adc();
 1e2:	0e 94 de 00 	call	0x1bc	; 0x1bc <init_adc>
	DDRC=0xff;//port c as output for motors
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	84 bb       	out	0x14, r24	; 20
	{
		lcd_init();
		x=read_adc(2);
		lcd_goto(0,1);
		lcd_printi(x);
		lcd_prints(" ->X");
 1ea:	0f 2e       	mov	r0, r31
 1ec:	f5 e6       	ldi	r31, 0x65	; 101
 1ee:	ef 2e       	mov	r14, r31
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	ff 2e       	mov	r15, r31
 1f4:	f0 2d       	mov	r31, r0
		y=read_adc(3);
		lcd_goto(0,2);
		lcd_printi(y);
		lcd_prints(" ->Y");
 1f6:	0f 2e       	mov	r0, r31
 1f8:	fa e6       	ldi	r31, 0x6A	; 106
 1fa:	cf 2e       	mov	r12, r31
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	df 2e       	mov	r13, r31
 200:	f0 2d       	mov	r31, r0
	
	if (y>370)
	{
	PORTC=0b00000101;//right
 202:	0f 2e       	mov	r0, r31
 204:	f5 e0       	ldi	r31, 0x05	; 5
 206:	bf 2e       	mov	r11, r31
 208:	f0 2d       	mov	r31, r0
	PORTC=0b00000000;
	_delay_ms(10);
	}
    else if (x>350)
	{
	PORTC=0b00000110;//fw
 20a:	0f 2e       	mov	r0, r31
 20c:	f6 e0       	ldi	r31, 0x06	; 6
 20e:	8f 2e       	mov	r8, r31
 210:	f0 2d       	mov	r31, r0
	PORTC=0b00000000;
	_delay_ms(10);
	}
	else if (x<300)
	{
	PORTC=0b00001001;//rev
 212:	0f 2e       	mov	r0, r31
 214:	f9 e0       	ldi	r31, 0x09	; 9
 216:	9f 2e       	mov	r9, r31
 218:	f0 2d       	mov	r31, r0
	PORTC=0b00000000;
	_delay_ms(10);
	}
	else if (y<300)
	{
	PORTC=0b00001010;//left
 21a:	0f 2e       	mov	r0, r31
 21c:	fa e0       	ldi	r31, 0x0A	; 10
 21e:	af 2e       	mov	r10, r31
 220:	f0 2d       	mov	r31, r0
	init_adc();
	DDRC=0xff;//port c as output for motors
	int x,y;
	while(1)
	{
		lcd_init();
 222:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_init>
		x=read_adc(2);
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <read_adc>
 22c:	8c 01       	movw	r16, r24
		lcd_goto(0,1);
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_goto>
		lcd_printi(x);
 236:	c8 01       	movw	r24, r16
 238:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_printi>
		lcd_prints(" ->X");
 23c:	c7 01       	movw	r24, r14
 23e:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_prints>
		y=read_adc(3);
 242:	83 e0       	ldi	r24, 0x03	; 3
 244:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <read_adc>
 248:	ec 01       	movw	r28, r24
		lcd_goto(0,2);
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	62 e0       	ldi	r22, 0x02	; 2
 24e:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_goto>
		lcd_printi(y);
 252:	ce 01       	movw	r24, r28
 254:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_printi>
		lcd_prints(" ->Y");
 258:	c6 01       	movw	r24, r12
 25a:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_prints>
	
	if (y>370)
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	c3 37       	cpi	r28, 0x73	; 115
 262:	d8 07       	cpc	r29, r24
 264:	94 f0       	brlt	.+36     	; 0x28a <main+0xa8>
	{
	PORTC=0b00000101;//right
 266:	b5 ba       	out	0x15, r11	; 21
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	91 ee       	ldi	r25, 0xE1	; 225
 26c:	a4 e0       	ldi	r26, 0x04	; 4
 26e:	81 50       	subi	r24, 0x01	; 1
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	a0 40       	sbci	r26, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <main+0x8c>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0x96>
 278:	00 00       	nop
	_delay_ms(100);	
	PORTC=0b00000000;
 27a:	15 ba       	out	0x15, r1	; 21
 27c:	af e3       	ldi	r26, 0x3F	; 63
 27e:	bc e9       	ldi	r27, 0x9C	; 156
 280:	11 97       	sbiw	r26, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <main+0x9e>
 284:	00 c0       	rjmp	.+0      	; 0x286 <main+0xa4>
 286:	00 00       	nop
 288:	cc cf       	rjmp	.-104    	; 0x222 <main+0x40>
	_delay_ms(10);
	}
	else if (y<300)
 28a:	b1 e0       	ldi	r27, 0x01	; 1
 28c:	cc 32       	cpi	r28, 0x2C	; 44
 28e:	db 07       	cpc	r29, r27
 290:	94 f4       	brge	.+36     	; 0x2b6 <main+0xd4>
	{
	PORTC=0b00001010;//left
 292:	a5 ba       	out	0x15, r10	; 21
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	91 ee       	ldi	r25, 0xE1	; 225
 298:	a4 e0       	ldi	r26, 0x04	; 4
 29a:	81 50       	subi	r24, 0x01	; 1
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	a0 40       	sbci	r26, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <main+0xb8>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0xc2>
 2a4:	00 00       	nop
	_delay_ms(100);
	PORTC=0b00000000;
 2a6:	15 ba       	out	0x15, r1	; 21
 2a8:	af e3       	ldi	r26, 0x3F	; 63
 2aa:	bc e9       	ldi	r27, 0x9C	; 156
 2ac:	11 97       	sbiw	r26, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <main+0xca>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0xd0>
 2b2:	00 00       	nop
 2b4:	b6 cf       	rjmp	.-148    	; 0x222 <main+0x40>
	_delay_ms(10);
	}
	else if (x<300)
 2b6:	b1 e0       	ldi	r27, 0x01	; 1
 2b8:	0c 32       	cpi	r16, 0x2C	; 44
 2ba:	1b 07       	cpc	r17, r27
 2bc:	94 f4       	brge	.+36     	; 0x2e2 <main+0x100>
	{
	PORTC=0b00001001;//rev
 2be:	95 ba       	out	0x15, r9	; 21
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	91 ee       	ldi	r25, 0xE1	; 225
 2c4:	a4 e0       	ldi	r26, 0x04	; 4
 2c6:	81 50       	subi	r24, 0x01	; 1
 2c8:	90 40       	sbci	r25, 0x00	; 0
 2ca:	a0 40       	sbci	r26, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0xe4>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0xee>
 2d0:	00 00       	nop
	_delay_ms(100);
	PORTC=0b00000000;
 2d2:	15 ba       	out	0x15, r1	; 21
 2d4:	af e3       	ldi	r26, 0x3F	; 63
 2d6:	bc e9       	ldi	r27, 0x9C	; 156
 2d8:	11 97       	sbiw	r26, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <main+0xf6>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0xfc>
 2de:	00 00       	nop
 2e0:	a0 cf       	rjmp	.-192    	; 0x222 <main+0x40>
	_delay_ms(10);
	}
    else if (x>350)
 2e2:	b1 e0       	ldi	r27, 0x01	; 1
 2e4:	0f 35       	cpi	r16, 0x5F	; 95
 2e6:	1b 07       	cpc	r17, r27
 2e8:	94 f0       	brlt	.+36     	; 0x30e <main+0x12c>
	{
	PORTC=0b00000110;//fw
 2ea:	85 ba       	out	0x15, r8	; 21
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
 2ee:	91 ee       	ldi	r25, 0xE1	; 225
 2f0:	a4 e0       	ldi	r26, 0x04	; 4
 2f2:	81 50       	subi	r24, 0x01	; 1
 2f4:	90 40       	sbci	r25, 0x00	; 0
 2f6:	a0 40       	sbci	r26, 0x00	; 0
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <main+0x110>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <main+0x11a>
 2fc:	00 00       	nop
	_delay_ms(100);
	PORTC=0b00000000;
 2fe:	15 ba       	out	0x15, r1	; 21
 300:	af e3       	ldi	r26, 0x3F	; 63
 302:	bc e9       	ldi	r27, 0x9C	; 156
 304:	11 97       	sbiw	r26, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <main+0x122>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x128>
 30a:	00 00       	nop
 30c:	8a cf       	rjmp	.-236    	; 0x222 <main+0x40>
	_delay_ms(10);
	}
	else
	PORTC=0b00000000;
 30e:	15 ba       	out	0x15, r1	; 21
 310:	88 cf       	rjmp	.-240    	; 0x222 <main+0x40>

00000312 <itoa>:
 312:	fb 01       	movw	r30, r22
 314:	9f 01       	movw	r18, r30
 316:	e8 94       	clt
 318:	42 30       	cpi	r20, 0x02	; 2
 31a:	c4 f0       	brlt	.+48     	; 0x34c <itoa+0x3a>
 31c:	45 32       	cpi	r20, 0x25	; 37
 31e:	b4 f4       	brge	.+44     	; 0x34c <itoa+0x3a>
 320:	4a 30       	cpi	r20, 0x0A	; 10
 322:	29 f4       	brne	.+10     	; 0x32e <itoa+0x1c>
 324:	97 fb       	bst	r25, 7
 326:	1e f4       	brtc	.+6      	; 0x32e <itoa+0x1c>
 328:	90 95       	com	r25
 32a:	81 95       	neg	r24
 32c:	9f 4f       	sbci	r25, 0xFF	; 255
 32e:	64 2f       	mov	r22, r20
 330:	77 27       	eor	r23, r23
 332:	0e 94 ba 01 	call	0x374	; 0x374 <__udivmodhi4>
 336:	80 5d       	subi	r24, 0xD0	; 208
 338:	8a 33       	cpi	r24, 0x3A	; 58
 33a:	0c f0       	brlt	.+2      	; 0x33e <itoa+0x2c>
 33c:	89 5d       	subi	r24, 0xD9	; 217
 33e:	81 93       	st	Z+, r24
 340:	cb 01       	movw	r24, r22
 342:	00 97       	sbiw	r24, 0x00	; 0
 344:	a1 f7       	brne	.-24     	; 0x32e <itoa+0x1c>
 346:	16 f4       	brtc	.+4      	; 0x34c <itoa+0x3a>
 348:	5d e2       	ldi	r21, 0x2D	; 45
 34a:	51 93       	st	Z+, r21
 34c:	10 82       	st	Z, r1
 34e:	c9 01       	movw	r24, r18
 350:	0c 94 aa 01 	jmp	0x354	; 0x354 <strrev>

00000354 <strrev>:
 354:	dc 01       	movw	r26, r24
 356:	fc 01       	movw	r30, r24
 358:	67 2f       	mov	r22, r23
 35a:	71 91       	ld	r23, Z+
 35c:	77 23       	and	r23, r23
 35e:	e1 f7       	brne	.-8      	; 0x358 <strrev+0x4>
 360:	32 97       	sbiw	r30, 0x02	; 2
 362:	04 c0       	rjmp	.+8      	; 0x36c <strrev+0x18>
 364:	7c 91       	ld	r23, X
 366:	6d 93       	st	X+, r22
 368:	70 83       	st	Z, r23
 36a:	62 91       	ld	r22, -Z
 36c:	ae 17       	cp	r26, r30
 36e:	bf 07       	cpc	r27, r31
 370:	c8 f3       	brcs	.-14     	; 0x364 <strrev+0x10>
 372:	08 95       	ret

00000374 <__udivmodhi4>:
 374:	aa 1b       	sub	r26, r26
 376:	bb 1b       	sub	r27, r27
 378:	51 e1       	ldi	r21, 0x11	; 17
 37a:	07 c0       	rjmp	.+14     	; 0x38a <__udivmodhi4_ep>

0000037c <__udivmodhi4_loop>:
 37c:	aa 1f       	adc	r26, r26
 37e:	bb 1f       	adc	r27, r27
 380:	a6 17       	cp	r26, r22
 382:	b7 07       	cpc	r27, r23
 384:	10 f0       	brcs	.+4      	; 0x38a <__udivmodhi4_ep>
 386:	a6 1b       	sub	r26, r22
 388:	b7 0b       	sbc	r27, r23

0000038a <__udivmodhi4_ep>:
 38a:	88 1f       	adc	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	5a 95       	dec	r21
 390:	a9 f7       	brne	.-22     	; 0x37c <__udivmodhi4_loop>
 392:	80 95       	com	r24
 394:	90 95       	com	r25
 396:	bc 01       	movw	r22, r24
 398:	cd 01       	movw	r24, r26
 39a:	08 95       	ret

0000039c <_exit>:
 39c:	f8 94       	cli

0000039e <__stop_program>:
 39e:	ff cf       	rjmp	.-2      	; 0x39e <__stop_program>
